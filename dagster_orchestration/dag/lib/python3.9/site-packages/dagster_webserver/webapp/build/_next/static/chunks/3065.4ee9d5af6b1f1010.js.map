{"version":3,"file":"static/chunks/3065.4ee9d5af6b1f1010.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/overview/OverviewExpansionKey.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/ui/findDuplicateRepoNames.tsx","webpack://_N_E/../ui-core/src/ui/useRepoExpansionState.tsx"],"sourcesContent":["import {Box, Button, Dialog, DialogFooter, DialogHeader, Icon} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = useContext(WorkspaceContext);\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedJobHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                    placement=\"top\"\n                  >\n                    <Tag>{row.jobCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedJobRow\n                key={key}\n                name={row.name}\n                isJob={row.isJob}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/JobsPageContent.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {useBlockTraceUntilTrue} from '../performance/TraceContext';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const JobsPageContent = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && workspaceLoading;\n\n  useBlockTraceUntilTrue('OverviewJobs', !loading);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n      >\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          {repoCount > 1 ? <RepoFilterButton /> : null}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<OverviewJobsQuery['workspaceOrError'], {__typename: 'Workspace'}>['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagster.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = useCallback(\n    (_key: string | RepoAddress) => {\n      const key = typeof _key === 'object' ? repoAddressAsHumanString(_key) : _key;\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n"],"names":["RepoFilterButton","allRepos","visibleRepos","toggleVisible","useContext","WorkspaceContext","open","setOpen","useState","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","jsx","DialogHeader","icon","label","RepoSelector","options","onBrowse","onToggle","selected","DialogFooter","Box","padding","top","Button","intent","onClick","outlined","Icon","name","rightIcon","length","concat","OverviewJobsTable","repos","param","parentRef","useRef","allKeys","useMemo","map","repoAddress","repoAddressAsHumanString","expandedKeys","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","jobs","push","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","row","ii","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","div","overflow","Container","ref","VirtualizedJobHeader","Inner","$totalHeight","index","key","size","start","RepoRow","height","expanded","showLocation","has","rightElement","Tooltip","content","placement","Tag","VirtualizedJobRow","JobsPageContent","loading","workspaceLoading","data","cachedData","searchValue","setSearchValue","useQueryPersistedState","queryKey","defaults","search","repoCount","queryResultOverview","useQuery","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","queryLoading","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","repoBuckets","cachedEntries","Object","values","filter","location","__typename","workspaceOrError","entries","locationEntries","visibleKeys","visibleRepoKeys","buildBuckets","useBlockTraceUntilTrue","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","showSearchSpinner","horizontal","vertical","flex","direction","alignItems","justifyContent","grow","gap","TextInput","value","SearchInputSpinner","tooltipContent","undefined","onChange","e","target","placeholder","QueryRefreshCountdown","SpinnerWithText","paddingTop","Spinner","purpose","color","Colors","anyReposHidden","NonIdealState","title","description","strong","entry","locationOrLoadError","buckets","repo","repositories","pipelines","buildRepoAddress","isHiddenAssetGroupJob","pipeline","sortRepoBuckets","gql","PYTHON_ERROR_FRAGMENT","sort","a","b","aString","bString","localeCompare","Set","option","repository","repositoryLocation","uniques","duplicates","repoNames","repoName","add","validateExpandedKeys","Array","isArray","parsed","buildStorageKey","basePath","collapsedKey","AppContext","collapsedStorageKey","collapsedKeys","setCollapsedKeys","useStateWithStorage","useCallback","_key","nextCollapsedKeys","delete","from","expand","collapsedSet"],"sourceRoot":""}