{"version":3,"file":"static/chunks/4950.07537ecccf454e26.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/pipelines/PipelineRunsRoot.tsx","webpack://_N_E/../ui-core/src/snapshots/SnapshotNav.tsx","webpack://_N_E/../ui-core/src/snapshots/SnapshotRoot.tsx","webpack://_N_E/../ui-core/src/ui/StickyTableContainer.tsx"],"sourcesContent":["import {\n  Box,\n  ButtonLink,\n  CursorHistoryControls,\n  Icon,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {\n  PipelineRunsRootQuery,\n  PipelineRunsRootQueryVariables,\n} from './types/PipelineRunsRoot.types';\nimport {useJobTitle} from './useJobTitle';\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunTable} from '../runs/RunTable';\nimport {RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTableRunFragment';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterToken,\n  RunFilterTokenType,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  useRunsFilterInput,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {\n  isThisThingAJob,\n  isThisThingAnAssetJob,\n  useRepository,\n} from '../workspace/WorkspaceContext/util';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = [\n  'status',\n  'tag',\n  'id',\n  'created_date_before',\n  'created_date_after',\n];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot = (props: Props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQuery,\n    PipelineRunsRootQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {button, activeFiltersJsx} = useRunsFilterInput({\n    enabledFilters: ENABLED_FILTERS,\n    tokens: filterTokens,\n    onChange: setFilterTokens,\n    loading: queryResult.loading,\n  });\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            const runs = pipelineRunsOrError.results;\n\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          justifyContent: 'space-between',\n                          grow: 1,\n                          alignItems: 'center',\n                          gap: 4,\n                        }}\n                        margin={{right: 8}}\n                      >\n                        {button}\n                        <QueryRefreshCountdown refreshState={refreshState} />\n                      </Box>\n                    }\n                    belowActionBarComponents={\n                      <>\n                        {permanentTokens.map(({token, value}) => (\n                          <Tag key={token}>{`${token}:${value}`}</Tag>\n                        ))}\n                        {activeFiltersJsx.length ? (\n                          <>\n                            {activeFiltersJsx}\n                            <ButtonLink\n                              onClick={() => {\n                                setFilterTokens([]);\n                              }}\n                            >\n                              Clear all\n                            </ButtonLink>\n                          </>\n                        ) : null}\n                      </>\n                    }\n                    emptyState={() => (\n                      <EmptyState\n                        repoAddress={repoAddress}\n                        anyFilter={filterTokens.length > 0}\n                        jobName={pipelineName}\n                        jobPath={pipelinePath}\n                      />\n                    )}\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\ninterface EmptyStateProps {\n  repoAddress: RepoAddress | null;\n  jobName: string;\n  jobPath: string;\n  anyFilter: boolean;\n}\n\nconst EmptyState = (props: EmptyStateProps) => {\n  const {repoAddress, anyFilter, jobName, jobPath} = props;\n\n  const repo = useRepository(repoAddress);\n  const isAssetJob = isThisThingAnAssetJob(repo, jobName);\n\n  const description = () => {\n    if (!repoAddress) {\n      return <div>You have not launched any runs for this job.</div>;\n    }\n\n    if (isAssetJob) {\n      return (\n        <Box flex={{direction: 'column', gap: 12}}>\n          <div>\n            {anyFilter\n              ? 'There are no matching runs for these filters.'\n              : 'You have not materialized any assets with this job yet.'}\n          </div>\n          <div>\n            <AnchorButton\n              icon={<Icon name=\"materialization\" />}\n              to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}`)}\n            >\n              Materialize an asset\n            </AnchorButton>\n          </div>\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12}}>\n        <div>\n          {anyFilter\n            ? 'There are no matching runs for these filters.'\n            : 'You have not launched any runs for this job yet.'}\n        </div>\n        <div>\n          <AnchorButton\n            icon={<Icon name=\"add_circle\" />}\n            to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}/playground`)}\n          >\n            Launch a run\n          </AnchorButton>\n        </div>\n      </Box>\n    );\n  };\n\n  return (\n    <Box padding={{vertical: 64}}>\n      <NonIdealState icon=\"run\" title=\"No runs found\" description={description()} />\n    </Box>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = gql`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {FontFamily, Heading, PageHeader, Tabs, Tag} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\n\nimport {SnapshotQuery, SnapshotQueryVariables} from './types/SnapshotNav.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {ExplorerPath, explorerPathToString} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {useActivePipelineForName} from '../workspace/WorkspaceContext/util';\nimport {workspacePipelinePathGuessRepo} from '../workspace/workspacePath';\n\nconst SNAPSHOT_PARENT_QUERY = gql`\n  query SnapshotQuery($snapshotId: String!) {\n    pipelineSnapshotOrError(snapshotId: $snapshotId) {\n      ... on PipelineSnapshot {\n        id\n        parentSnapshotId\n      }\n    }\n  }\n`;\n\ninterface SnapshotNavProps {\n  activeTab?: string;\n  explorerPath: ExplorerPath;\n}\n\nexport const SnapshotNav = (props: SnapshotNavProps) => {\n  const {activeTab = '', explorerPath} = props;\n  const {pipelineName, snapshotId = ''} = explorerPath;\n  const explorerPathString = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  const currentPipelineState = useActivePipelineForName(pipelineName);\n  const currentSnapshotID = currentPipelineState?.pipelineSnapshotId;\n\n  const queryResult = useQuery<SnapshotQuery, SnapshotQueryVariables>(SNAPSHOT_PARENT_QUERY, {\n    variables: {snapshotId},\n  });\n\n  const {data, loading} = queryResult;\n\n  const tag = () => {\n    if (loading) {\n      return (\n        <Tag intent=\"none\" minimal>\n          ...\n        </Tag>\n      );\n    }\n\n    if (\n      !currentSnapshotID ||\n      (currentSnapshotID !== snapshotId &&\n        data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n        data?.pipelineSnapshotOrError?.parentSnapshotId !== currentSnapshotID)\n    ) {\n      return (\n        <Tag intent=\"warning\" minimal>\n          Snapshot\n        </Tag>\n      );\n    }\n\n    return (\n      <Tag intent=\"success\" minimal>\n        Current\n      </Tag>\n    );\n  };\n\n  const tabs = [\n    {\n      text: 'Definition',\n      pathComponent: '',\n      href: `/snapshots/${explorerPathString}`,\n    },\n    {\n      text: 'Runs',\n      pathComponent: 'runs',\n      href: `/snapshots/${explorerPathString}runs`,\n    },\n  ];\n\n  return (\n    <PageHeader\n      title={\n        <Heading style={{fontFamily: FontFamily.monospace, fontSize: '16px'}}>\n          {explorerPath.snapshotId?.slice(0, 8)}\n        </Heading>\n      }\n      tags={\n        <>\n          <Tag icon=\"schema\">\n            Snapshot of{' '}\n            <Link to={workspacePipelinePathGuessRepo(explorerPath.pipelineName)}>\n              {explorerPath.pipelineName}\n            </Link>\n          </Tag>\n          {tag()}\n        </>\n      }\n      tabs={\n        <Tabs selectedTabId={activeTab}>\n          {tabs.map((tab) => {\n            const {href, text, pathComponent} = tab;\n            return <TabLink key={text} id={pathComponent} title={text} to={href} />;\n          })}\n        </Tabs>\n      }\n    />\n  );\n};\n","import {Switch, useParams} from 'react-router-dom';\nimport {PipelineExplorerSnapshotRoot} from 'shared/pipelines/PipelineExplorerRoot.oss';\n\nimport {SnapshotNav} from './SnapshotNav';\nimport {Route} from '../app/Route';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {PipelineRunsRoot} from '../pipelines/PipelineRunsRoot';\n\nexport const SnapshotRoot = () => {\n  const {pipelinePath, tab} = useParams<{\n    pipelinePath: string;\n    tab?: string;\n  }>();\n  const explorerPath = explorerPathFromString(pipelinePath);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <SnapshotNav activeTab={tab} explorerPath={explorerPath} />\n      <Switch>\n        <Route path=\"/snapshots/:pipelinePath/runs\">\n          <PipelineRunsRoot />\n        </Route>\n        <Route path=\"/snapshots/(/?.*)\">\n          <PipelineExplorerSnapshotRoot />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default SnapshotRoot;\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\ninterface Props {\n  $top?: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top = 0}) => $top}px;\n    background-color: ${Colors.backgroundDefault()};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.keylineDefault()};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n"],"names":["ENABLED_FILTERS","PipelineRunsRoot","useTrackPageView","pipelinePath","useParams","repoAddress","props","explorerPath","explorerPathFromString","pipelineName","snapshotId","repo","useRepository","isJob","isThisThingAJob","useJobTitle","filterTokens","setFilterTokens","useQueryPersistedRunFilters","permanentTokens","useMemo","token","value","filter","Boolean","allTokens","repoToken","repoAddressAsTag","DagsterTag","RepositoryLabelTag","concat","push","queryResult","paginationProps","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","variables","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","__typename","results","PAGE_SIZE","id","getResultArray","data","onAddTag","useCallback","tokenAsString","tokenToString","some","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","button","activeFiltersJsx","useRunsFilterInput","enabledFilters","tokens","onChange","loading","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","RunsQueryRefetchContext","Provider","refetch","Page","Loading","allowStaleData","param","Box","padding","vertical","NonIdealState","icon","title","description","message","displayed","slice","hasNextCursor","hasPrevCursor","jsxs","Fragment","StickyTableContainer","$top","RunTable","actionBarComponents","flex","direction","justifyContent","grow","alignItems","gap","margin","right","QueryRefreshCountdown","belowActionBarComponents","map","Tag","length","ButtonLink","onClick","emptyState","EmptyState","anyFilter","jobName","jobPath","div","style","marginTop","CursorHistoryControls","isAssetJob","isThisThingAnAssetJob","AnchorButton","Icon","name","to","workspacePathFromAddress","gql","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","SNAPSHOT_PARENT_QUERY","SnapshotNav","activeTab","explorerPathString","explorerPathToString","opNames","currentPipelineState","useActivePipelineForName","currentSnapshotID","pipelineSnapshotId","useQuery","jsx_runtime","PageHeader","Heading","fontFamily","FontFamily","monospace","fontSize","tags","Link","workspacePipelinePathGuessRepo","intent","minimal","pipelineSnapshotOrError","parentSnapshotId","tabs","Tabs","selectedTabId","text","pathComponent","href","tab","TabLink","SnapshotRoot","display","flexDirection","minWidth","width","height","Switch","Route","path","PipelineExplorerSnapshotRoot","snapshots_SnapshotRoot","styled","withConfig","Colors"],"sourceRoot":""}