{"version":3,"file":"static/chunks/6268.62bb7583a537aa51.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/lodash/partition.js","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/../ui-core/src/runs/RunListTabs.tsx","webpack://_N_E/../ui-core/src/runs/QueuedRunsBanners.tsx","webpack://_N_E/../ui-core/src/runs/TerminateAllRunsButton.tsx","webpack://_N_E/../ui-core/src/hooks/usePortalSlot.tsx","webpack://_N_E/../ui-core/src/runs/RunsRoot.tsx","webpack://_N_E/../ui-core/src/runs/usePaginatedRunsTableRuns.tsx","webpack://_N_E/../ui-core/src/ui/StickyTableContainer.tsx"],"sourcesContent":["var createAggregator = require('./_createAggregator');\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n","import {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\nimport {gql, useQuery} from '../apollo-client';\n\nexport const useCanSeeConfig = () => {\n  const queryResult = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!queryResult.data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {Colors, JoinedButtons, TokenizingFieldValue} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport {useMemo} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled, {css} from 'styled-components';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunStatus, RunsFilter} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'failed':\n      return 'Runs | Failed';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\nexport const useRunListTabs = (filter: RunsFilter = {}) => {\n  const queryResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = queryResult;\n  const {queuedCount, inProgressCount} = useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  const tabs = (\n    <JoinedButtons>\n      <ActivatableButton to={urlForStatus([])} id=\"all\" $active={selectedTab === 'all'}>\n        All runs\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n        $active={selectedTab === 'queued'}\n      >\n        Queued ({queuedCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n        $active={selectedTab === 'in-progress'}\n      >\n        In progress ({inProgressCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(failedStatuses))}\n        id=\"failed\"\n        $active={selectedTab === 'failed'}\n      >\n        Failed\n      </ActivatableButton>\n      <ActivatableButton\n        title=\"Scheduled\"\n        to=\"/runs/scheduled\"\n        id=\"scheduled\"\n        $active={selectedTab === 'scheduled'}\n      >\n        Scheduled\n      </ActivatableButton>\n    </JoinedButtons>\n  );\n\n  return {tabs, queryResult};\n};\n\nexport const ActivatableButton = styled(AnchorButton)<{$active: boolean}>`\n  color: ${Colors.textLight()};\n\n  &&:hover {\n    color: ${Colors.textLight()};\n  }\n\n  ${({$active}) =>\n    $active\n      ? css`\n          background-color: ${Colors.backgroundLighterHover()};\n          color: ${Colors.textDefault()};\n\n          &&:hover {\n            background-color: ${Colors.backgroundLighterHover()};\n            color: ${Colors.textDefault()};\n          }\n        `\n      : css`\n          background-color: ${Colors.backgroundDefault()};\n        `}\n`;\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(failedStatuses, statusTokens)) {\n    return 'failed';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  QueueDaemonStatusQuery,\n  QueueDaemonStatusQueryVariables,\n} from './types/QueuedRunsBanners.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {InstancePageContext} from '../instance/InstancePageContext';\nimport {useCanSeeConfig} from '../instance/useCanSeeConfig';\n\nexport const QueuedRunsBanners = () => {\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}} style={{minWidth: '100%'}} border=\"bottom\">\n      {canSeeConfig && (\n        <Alert\n          intent=\"info\"\n          title={<Link to=\"/config#run_coordinator\">View queue configuration</Link>}\n        />\n      )}\n      {canSeeConfig && <QueueDaemonAlert />}\n    </Box>\n  );\n};\n\nconst QueueDaemonAlert = () => {\n  const {data} = useQuery<QueueDaemonStatusQuery, QueueDaemonStatusQueryVariables>(\n    QUEUE_DAEMON_STATUS_QUERY,\n  );\n  const {pageTitle} = useContext(InstancePageContext);\n  const status = data?.instance.daemonHealth.daemonStatus;\n  if (status?.required && !status?.healthy) {\n    return (\n      <Alert\n        intent=\"warning\"\n        title=\"The queued run coordinator is not healthy.\"\n        description={\n          <div>\n            View <Link to=\"/health\">{pageTitle}</Link> for details.\n          </div>\n        }\n      />\n    );\n  }\n  return null;\n};\n\nconst QUEUE_DAEMON_STATUS_QUERY = gql`\n  query QueueDaemonStatusQuery {\n    instance {\n      id\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"QUEUED_RUN_COORDINATOR\") {\n          id\n          daemonType\n          healthy\n          required\n        }\n      }\n    }\n  }\n`;\n","import {Button} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport {useState} from 'react';\n\nimport {queuedStatuses} from './RunStatuses';\nimport {TerminationDialog} from './TerminationDialog';\nimport {\n  TerminateRunIdsQuery,\n  TerminateRunIdsQueryVariables,\n} from './types/TerminateAllRunsButton.types';\nimport {gql, useApolloClient} from '../apollo-client';\nimport {RunsFilter} from '../graphql/types';\n\nexport const TerminateAllRunsButton = ({\n  refetch,\n  filter,\n  disabled,\n}: {\n  refetch: () => void;\n  filter: RunsFilter;\n  disabled: boolean;\n}) => {\n  const [terminating, setTerminating] = useState<{[runId: string]: boolean} | null>(null);\n  const client = useApolloClient();\n\n  const onTerminateAll = async () => {\n    const queuedRunIds = await client.query<TerminateRunIdsQuery, TerminateRunIdsQueryVariables>({\n      query: TERMINATE_RUN_IDS_QUERY,\n      variables: {filter},\n    });\n    setTerminating(\n      queuedRunIds.data.pipelineRunsOrError.__typename === 'Runs'\n        ? Object.fromEntries(\n            queuedRunIds.data.pipelineRunsOrError.results.map((run) => [run.id, run.canTerminate]),\n          )\n        : {},\n    );\n  };\n  return (\n    <>\n      <TerminationDialog\n        isOpen={terminating !== null}\n        selectedRuns={terminating || {}}\n        selectedRunsAllQueued={isEqual(filter, {statuses: Array.from(queuedStatuses)})}\n        onClose={() => setTerminating(null)}\n        onComplete={() => refetch()}\n      />\n      <Button intent=\"danger\" outlined disabled={disabled} onClick={onTerminateAll}>\n        Terminate all…\n      </Button>\n    </>\n  );\n};\n\nconst TERMINATE_RUN_IDS_QUERY = gql`\n  query TerminateRunIdsQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          status\n          canTerminate\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport {createPortal} from 'react-dom';\n\n/**\n * Allows you to move a component around in the tree without it losing its state.\n */\nexport function usePortalSlot(reactNode: React.ReactNode) {\n  const [targetEl, setTargetEl] = React.useState<HTMLDivElement | null>(null);\n\n  React.useLayoutEffect(() => {\n    setTargetEl((e) => (e === null ? document.createElement('div') : e));\n  }, []);\n\n  return [\n    targetEl ? createPortal(reactNode, targetEl) : null,\n    targetEl ? <DOMNodeHost node={targetEl} /> : null,\n  ];\n}\n\nfunction DOMNodeHost({node}: {node: HTMLElement}) {\n  const ref = React.useRef<HTMLDivElement | null>(null);\n  React.useLayoutEffect(() => {\n    const ownDiv = ref.current;\n    if (node.parentNode === ownDiv) {\n      return;\n    }\n    if (node.parentNode !== null && node.parentNode !== ownDiv) {\n      throw Error('Cannot render the same node twice');\n    }\n    ownDiv?.appendChild(node);\n    return () => {\n      ownDiv?.removeChild(node);\n    };\n  }, [node]);\n  return <div ref={ref} />;\n}\n","import {\n  Box,\n  ButtonLink,\n  CursorHistoryControls,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  tokenToString,\n} from '@dagster-io/ui-components';\nimport partition from 'lodash/partition';\nimport {useCallback, useMemo} from 'react';\n\nimport {QueuedRunsBanners} from './QueuedRunsBanners';\nimport {useRunListTabs, useSelectedRunsTab} from './RunListTabs';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {RunTable} from './RunTable';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {\n  RunFilterToken,\n  RunFilterTokenType,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  useRunsFilterInput,\n} from './RunsFilterInput';\nimport {TerminateAllRunsButton} from './TerminateAllRunsButton';\nimport {usePaginatedRunsTableRuns} from './usePaginatedRunsTableRuns';\nimport {ApolloError} from '../apollo-client';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useMergedRefresh,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {usePortalSlot} from '../hooks/usePortalSlot';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\n\nconst PAGE_SIZE = 25;\n\nexport const RunsRoot = () => {\n  useTrackPageView();\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters();\n  const filter = runsFilterForSearchTokens(filterTokens);\n  const {queryResult, paginationProps} = usePaginatedRunsTableRuns(filter, PAGE_SIZE);\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const currentTab = useSelectedRunsTab(filterTokens);\n  const staticStatusTags = currentTab !== 'all';\n  const [statusTokens, nonStatusTokens] = partition(\n    filterTokens,\n    (token) => token.token === 'status',\n  );\n\n  const setFilterTokensWithStatus = useCallback(\n    (tokens: RunFilterToken[]) => {\n      if (staticStatusTags) {\n        setFilterTokens([...statusTokens, ...tokens]);\n      } else {\n        setFilterTokens(tokens);\n      }\n    },\n    [setFilterTokens, staticStatusTags, statusTokens],\n  );\n\n  const onAddTag = useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!nonStatusTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokensWithStatus([...nonStatusTokens, token]);\n      }\n    },\n    [nonStatusTokens, setFilterTokensWithStatus],\n  );\n\n  const enabledFilters = useMemo(() => {\n    const filters: RunFilterTokenType[] = [\n      'tag',\n      'snapshotId',\n      'id',\n      'job',\n      'pipeline',\n      'partition',\n      'backfill',\n    ];\n\n    if (!staticStatusTags) {\n      filters.push('status');\n    }\n\n    return filters;\n  }, [staticStatusTags]);\n\n  const mutableTokens = useMemo(() => {\n    if (staticStatusTags) {\n      return filterTokens.filter((token) => token.token !== 'status');\n    }\n    return filterTokens;\n  }, [filterTokens, staticStatusTags]);\n\n  const {tabs, queryResult: runQueryResult} = useRunListTabs(filter);\n  const countRefreshState = useQueryRefreshAtInterval(runQueryResult, FIFTEEN_SECONDS);\n  const combinedRefreshState = useMergedRefresh(countRefreshState, refreshState);\n\n  const {button, activeFiltersJsx} = useRunsFilterInput({\n    tokens: mutableTokens,\n    onChange: setFilterTokensWithStatus,\n    enabledFilters,\n  });\n\n  const [filtersPortal, filtersSlot] = usePortalSlot(button);\n\n  function actionBar() {\n    return (\n      <Box style={{width: '100%', marginRight: 8}} flex={{justifyContent: 'space-between'}}>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          {tabs}\n          {filtersSlot}\n        </Box>\n        {currentTab === 'queued' ? (\n          <TerminateAllRunsButton\n            refetch={combinedRefreshState.refetch}\n            filter={{...filter, statuses: Array.from(queuedStatuses)}}\n            disabled={\n              runQueryResult.data?.queuedCount.__typename === 'Runs'\n                ? runQueryResult.data?.queuedCount.count === 0\n                : true\n            }\n          />\n        ) : currentTab === 'in-progress' ? (\n          <TerminateAllRunsButton\n            refetch={combinedRefreshState.refetch}\n            filter={{...filter, statuses: Array.from(inProgressStatuses)}}\n            disabled={\n              runQueryResult.data?.inProgressCount.__typename === 'Runs'\n                ? runQueryResult.data?.inProgressCount.count === 0\n                : true\n            }\n          />\n        ) : undefined}\n      </Box>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Runs</Heading>}\n        right={<QueryRefreshCountdown refreshState={combinedRefreshState} />}\n      />\n      {filtersPortal}\n      <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n        <Loading\n          queryResult={queryResult}\n          allowStaleData\n          renderError={(error: ApolloError) => {\n            // In this case, a 400 is most likely due to invalid run filters, which are a GraphQL\n            // validation error but surfaced as a 400.\n            const badRequest = !!(\n              error?.networkError &&\n              'statusCode' in error.networkError &&\n              error.networkError.statusCode === 400\n            );\n            return (\n              <Box flex={{direction: 'column', gap: 32}} padding={{vertical: 8, horizontal: 24}}>\n                {actionBar()}\n                <NonIdealState\n                  icon=\"warning\"\n                  title={badRequest ? 'Invalid run filters' : 'Unexpected error'}\n                  description={\n                    badRequest\n                      ? 'The specified run filters are not valid. Please check the filters and try again.'\n                      : 'An unexpected error occurred. Check the console for details.'\n                  }\n                />\n              </Box>\n            );\n          }}\n        >\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={pipelineRunsOrError.results}\n                    onAddTag={onAddTag}\n                    filter={filter}\n                    actionBarComponents={actionBar()}\n                    belowActionBarComponents={\n                      currentTab === 'queued' || activeFiltersJsx.length ? (\n                        <>\n                          {currentTab === 'queued' && <QueuedRunsBanners />}\n                          {activeFiltersJsx.length > 0 && (\n                            <>\n                              {activeFiltersJsx}\n                              <ButtonLink onClick={() => setFilterTokensWithStatus([])}>\n                                Clear all\n                              </ButtonLink>\n                            </>\n                          )}\n                        </>\n                      ) : null\n                    }\n                  />\n                </StickyTableContainer>\n                {pipelineRunsOrError.results.length > 0 ? (\n                  <div style={{marginTop: '16px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </RunsQueryRefetchContext.Provider>\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunsRoot;\n","import {RUN_TABLE_RUN_FRAGMENT} from './RunTableRunFragment';\nimport {RunsRootQuery, RunsRootQueryVariables} from './types/usePaginatedRunsTableRuns.types';\nimport {useCursorPaginatedQuery} from './useCursorPaginatedQuery';\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunsFilter} from '../graphql/types';\n\nexport function usePaginatedRunsTableRuns(filter: RunsFilter, pageSize: number) {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[pageSize - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter,\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize,\n  });\n  return {queryResult, paginationProps};\n}\n\nexport const RUNS_ROOT_QUERY = gql`\n  query RunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\ninterface Props {\n  $top?: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top = 0}) => $top}px;\n    background-color: ${Colors.backgroundDefault()};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.keylineDefault()};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n"],"names":["partition","createAggregator","result","value","key","push","module","exports","useCanSeeConfig","queryResult","useQuery","INSTANCE_CONFIG_HAS_INFO","data","instance","hasInfo","gql","getDocumentTitle","selected","useRunListTabs","filter","RUN_TABS_COUNT_QUERY","variables","queuedFilter","statuses","Array","from","queuedStatuses","inProgressFilter","inProgressStatuses","countData","queuedCount","inProgressCount","useMemo","__typename","count","filterTokens","useQueryPersistedRunFilters","selectedTab","useSelectedRunsTab","useDocumentTitle","urlForStatus","tokensMinusStatus","token","statusTokens","map","status","runsPathWithFilters","tabs","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","JoinedButtons","jsx","ActivatableButton","to","id","$active","failedStatuses","title","styled","AnchorButton","Colors","param","css","pathname","useLocation","Set","isEqual","QueuedRunsBanners","canSeeConfig","jsx_runtime","Box","flex","direction","gap","style","minWidth","border","Alert","intent","Link","QueueDaemonAlert","QUEUE_DAEMON_STATUS_QUERY","pageTitle","useContext","InstancePageContext","daemonHealth","daemonStatus","required","healthy","description","div","TerminateAllRunsButton","refetch","disabled","terminating","setTerminating","useState","client","useApolloClient","onTerminateAll","queuedRunIds","query","TERMINATE_RUN_IDS_QUERY","pipelineRunsOrError","Object","fromEntries","results","run","canTerminate","Fragment","TerminationDialog","isOpen","selectedRuns","selectedRunsAllQueued","onClose","onComplete","Button","outlined","onClick","DOMNodeHost","node","ref","React","ownDiv","current","parentNode","Error","appendChild","removeChild","RunsRoot","useTrackPageView","setFilterTokens","runsFilterForSearchTokens","paginationProps","usePaginatedRunsTableRuns","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","currentTab","staticStatusTags","nonStatusTokens","setFilterTokensWithStatus","useCallback","tokens","onAddTag","tokenAsString","tokenToString","some","enabledFilters","filters","mutableTokens","runQueryResult","countRefreshState","combinedRefreshState","useMergedRefresh","button","activeFiltersJsx","useRunsFilterInput","onChange","filtersPortal","filtersSlot","usePortalSlot","reactNode","targetEl","setTargetEl","e","document","createElement","createPortal","actionBar","width","marginRight","justifyContent","alignItems","undefined","Page","PageHeader","Heading","right","QueryRefreshCountdown","RunsQueryRefetchContext","Provider","Loading","allowStaleData","renderError","badRequest","error","networkError","statusCode","padding","vertical","horizontal","NonIdealState","icon","message","StickyTableContainer","$top","RunTable","runs","actionBarComponents","belowActionBarComponents","length","ButtonLink","marginTop","CursorHistoryControls","runs_RunsRoot","pageSize","useCursorPaginatedQuery","nextCursorForResult","getResultArray","RUNS_ROOT_QUERY","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","withConfig"],"sourceRoot":""}