{"version":3,"file":"static/chunks/1069.fe3ca25504ffbc43.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetTags.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx"],"sourcesContent":["import {useEffect} from 'react';\n\nexport const useFavicon = (href: string) => {\n  useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  ErrorBoundary,\n  Icon,\n  NonIdealState,\n  SplitPanelContainer,\n  SplitPanelContainerHandle,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {memo} from 'react';\nimport styled from 'styled-components';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  matchingComputeLogKeyFromStepKey,\n  useComputeLogFileKeyForSelection,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode, QueuedState} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {CompletionType, useTraceDependency} from '../performance/TraceContext';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = memo((props: RunProps) => {\n  const {run, runId} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  const logsDependency = useTraceDependency('RunLogs');\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded dependency={logsDependency} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n});\n\nconst OnLogsLoaded = ({dependency}: {dependency: ReturnType<typeof useTraceDependency>}) => {\n  React.useLayoutEffect(() => {\n    dependency.completeDependency(CompletionType.SUCCESS);\n  }, [dependency]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = React.useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = React.useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = React.useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = runtimeGraph\n    ? logsFilter.logQuery\n        .filter((v) => v.token && v.token === 'query')\n        .reduce((accum, v) => {\n          accum.push(...filterByQuery(runtimeGraph, v.value).all.map((n) => n.name));\n          return accum;\n        }, [] as string[])\n    : [];\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let newSelected: string[];\n    const filterForExactStep = `\"${stepKey}\"`;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n      newSelected = [\n        ...selectionStepKeys.map((k) => (selectionQuery.includes(`\"${k}\"`) ? `\"${k}\"` : k)),\n      ];\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        newSelected.splice(index, 1);\n      } else {\n        // select the step otherwise\n        newSelected.push(filterForExactStep);\n      }\n    } else {\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        // deselect the step if already selected\n        newSelected = [];\n      } else {\n        // select the step otherwise\n        newSelected = [filterForExactStep];\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        matchingLogKey && setComputeLogFileKey(matchingLogKey);\n      }\n    }\n\n    onSetSelectionQuery(newSelected.join(', ') || '*');\n  };\n\n  const [expandedPanel, setExpandedPanel] = React.useState<null | 'top' | 'bottom'>(null);\n  const containerRef = React.useRef<SplitPanelContainerHandle>(null);\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      const size = containerRef.current.getSize();\n      if (size === 100) {\n        setExpandedPanel('top');\n      } else if (size === 0) {\n        setExpandedPanel('bottom');\n      }\n    }\n  }, []);\n\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    containerRef.current?.changeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    containerRef.current?.changeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    containerRef.current?.changeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.status === 'QUEUED') {\n      return <QueuedState run={run} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={{query: selectionQuery, keys: selectionStepKeys}}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={{query: selectionQuery, keys: selectionStepKeys}}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={containerRef}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        secondMinSize={56}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logType !== LogType.structured ? (\n                !computeLogFileKey ? (\n                  <NoStepSelectionState type={logType} />\n                ) : (\n                  <CapturedOrExternalLogPanel\n                    logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n                    logCaptureInfo={logCaptureInfo}\n                    visibleIOType={LogType[logType]}\n                    onSetDownloadUrl={setComputeLogUrl}\n                  />\n                )\n              ) : (\n                <LogsScrollingTable\n                  logs={logs}\n                  filter={logsFilter}\n                  filterStepKeys={logsFilterStepKeys}\n                  filterKey={`${JSON.stringify(logsFilter)}`}\n                  metadata={metadata}\n                />\n              )}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: Colors.backgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n","import {AssetKeyTagCollection} from './AssetTagCollections';\nimport {RunAssetsQuery, RunAssetsQueryVariables} from './types/RunAssetTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetsQuery, RunAssetsQueryVariables>(RUN_ASSETS_QUERY, {\n    variables: {runId: run.id},\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n  const {data, loading} = queryResult;\n\n  if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n    return null;\n  }\n\n  return (\n    <AssetKeyTagCollection useTags assetKeys={data.pipelineRunOrError.assets.map((a) => a.key)} />\n  );\n};\n\nconst RUN_ASSETS_QUERY = gql`\n  query RunAssetsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assets {\n          id\n          key {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {RunMetricsDialog} from 'shared/runs/RunMetricsDialog.oss';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {QueuedRunCriteriaDialog} from './QueuedRunCriteriaDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {RunFragment} from './types/RunFragments.types';\nimport {useMutation} from '../apollo-client';\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\nimport {RunStatus} from '../graphql/types';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrency';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrency.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\ntype VisibleDialog =\n  | 'config'\n  | 'delete'\n  | 'terminate'\n  | 'queue-criteria'\n  | 'free_slots'\n  | 'metrics'\n  | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const {runConfigYaml} = run;\n  const runMetricsEnabled = run.tags.some((t) => t.key === DagsterTag.RunMetrics);\n\n  const [visibleDialog, setVisibleDialog] = useState<VisibleDialog>(null);\n\n  const {rootServerURI} = useContext(AppContext);\n  const {refetch} = useContext(RunsQueryRefetchContext);\n\n  const copy = useCopyToClipboard();\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const copyConfig = async () => {\n    copy(runConfigYaml);\n    await showSharedToaster({\n      intent: 'success',\n      icon: 'copy_to_clipboard_done',\n      message: 'Copied!',\n    });\n  };\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        <Popover\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <Tooltip\n                content=\"Loadable in dagster-webserver-debug\"\n                position=\"left\"\n                targetTagName=\"div\"\n              >\n                <MenuItem\n                  text=\"Download debug file\"\n                  icon=\"download_for_offline\"\n                  onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                />\n              </Tooltip>\n              {run.status === RunStatus.QUEUED ? (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"history_toggle_off\"\n                  text=\"View queue criteria\"\n                  intent=\"none\"\n                  onClick={() => setVisibleDialog('queue-criteria')}\n                />\n              ) : null}\n              {runMetricsEnabled && RunMetricsDialog ? (\n                <MenuItem\n                  tagName=\"button\"\n                  icon=\"asset_plot\"\n                  text=\"View container metrics\"\n                  intent=\"none\"\n                  onClick={() => setVisibleDialog('metrics')}\n                />\n              ) : null}\n              {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                <MenuItem\n                  text=\"Free concurrency slots\"\n                  icon=\"lock\"\n                  onClick={freeConcurrencySlots}\n                />\n              ) : null}\n              {run.hasDeletePermission ? (\n                <MenuItem\n                  icon=\"delete\"\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={() => setVisibleDialog('delete')}\n                />\n              ) : null}\n            </Menu>\n          }\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        copyConfig={() => copyConfig()}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {run.status === RunStatus.QUEUED ? (\n        <QueuedRunCriteriaDialog\n          run={run}\n          isOpen={visibleDialog === 'queue-criteria'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {runMetricsEnabled && RunMetricsDialog ? (\n        <RunMetricsDialog\n          runId={run.id}\n          isOpen={visibleDialog === 'metrics'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {Box, ButtonLink, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {DagsterTag} from './RunTag';\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name} = instigationSelector;\n\n  return (\n    <>\n      <Tag icon={icon}>\n        <Box flex={{direction: 'row'}}>\n          <span>Launched by&nbsp;</span>\n          <ButtonLink onClick={() => setIsOpen(true)}>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </ButtonLink>\n        </Box>\n      </Tag>\n      <TickDetailsDialog\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n    </>\n  );\n};\n","import {Box, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const sortedKeys = useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <Popover\n      placement=\"bottom\"\n      content={\n        <div style={{width: '340px'}}>\n          <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n            Auto-materialized\n          </Box>\n          <Box\n            flex={{direction: 'column', gap: 12}}\n            padding={{vertical: 12}}\n            style={{maxHeight: '220px', overflowY: 'auto'}}\n          >\n            {sortedKeys.map((assetKey) => {\n              const url = assetDetailsPathForKey(assetKey, {\n                view: 'automation',\n                evaluation: evaluationId,\n              });\n              return (\n                <Box\n                  key={url}\n                  padding={{vertical: 8, left: 12, right: 16}}\n                  flex={{\n                    direction: 'row',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    gap: 8,\n                  }}\n                  style={{overflow: 'hidden'}}\n                >\n                  <Box\n                    flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Icon name=\"asset\" />\n                    <MiddleTruncate text={assetKey.path.join('/')} />\n                  </Box>\n                  <Link to={url} style={{whiteSpace: 'nowrap'}}>\n                    View evaluation\n                  </Link>\n                </Box>\n              );\n            })}\n          </Box>\n        </div>\n      }\n      interactionKind=\"hover\"\n    >\n      <Tag icon=\"auto_materialize_policy\">Auto-materialized</Tag>\n    </Popover>\n  );\n};\n","import {Box, FontFamily, Heading, NonIdealState, PageHeader, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link, useParams} from 'react-router-dom';\n\nimport {AssetCheckTagCollection, AssetKeyTagCollection} from './AssetTagCollections';\nimport {Run} from './Run';\nimport {RunAssetTags} from './RunAssetTags';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {assetKeysForRun} from './RunUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const queryResult = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n  const {data, loading} = queryResult;\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  const tickDetails = useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={\n            <Heading style={{display: 'flex', flexDirection: 'row', gap: 6}}>\n              <Link to=\"/runs\">Runs</Link>\n              <span>/</span>\n              <span style={{fontFamily: FontFamily.monospace}}>{runId.slice(0, 8)}</span>\n            </Heading>\n          }\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                {isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <AssetKeyTagCollection useTags assetKeys={assetKeysForRun(run)} />\n                ) : (\n                  <RunAssetTags run={run} />\n                )}\n                <AssetCheckTagCollection useTags assetChecks={run.assetCheckSelection} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string}) => {\n  const {data, runId} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return <Run run={undefined} runId={runId} />;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n"],"names":["useFavicon","useEffect","el","document","querySelector","previousHref","getAttribute","setAttribute","href","runStatusFavicon","status","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","memo","run","runId","props","logsFilter","setLogsFilter","useQueryPersistedLogFilter","selectionQuery","setSelectionQuery","useQueryPersistedState","queryKey","defaults","selection","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","concat","onShowStateDetails","stepKey","logs","errorNode","find","node","__typename","showCustomAlert","body","jsx_runtime","jsx","PythonErrorInfo","error","onSetSelectionQuery","query","logQuery","token","value","logsDependency","useTraceDependency","RunContext","Provider","LogsProvider","jsxs","Fragment","OnLogsLoaded","dependency","RunMetadataProvider","RunWithData","metadata","onSetLogsFilter","param","React","completeDependency","CompletionType","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","setQueryLogType","logType","computeLogUrl","setComputeLogUrl","stepKeysJSON","JSON","stringify","Object","keys","steps","sort","stepKeys","parse","runtimeGraph","executionPlan","toGraphQueryItems","selectionStepKeys","filterByQuery","all","map","n","name","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","useComputeLogFileKeyForSelection","defaultToFirstStep","logsFilterStepKeys","filter","v","reduce","accum","push","expandedPanel","setExpandedPanel","containerRef","current","size","getSize","isTopExpanded","isBottomExpanded","resetPanels","changeSize","SplitPanelContainer","ref","axis","identifier","firstInitialPercent","firstMinSize","first","QueuedState","ErrorBoundary","region","GanttChart","options","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","Box","flex","direction","alignItems","gap","Tooltip","content","Button","icon","Icon","onClick","RunActionButtons","graph","onClickStep","evt","newSelected","index","indexOf","filterForExactStep","shiftKey","includes","k","splice","length","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","join","onSetSelection","focusedTime","NonIdealState","title","GanttChartLoadingState","secondMinSize","second","LogsContainer","LogsToolbar","onSetLogType","lt","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","NoStepSelectionState","type","LogsScrollingTable","filterStepKeys","filterKey","styled","div","withConfig","grow","justifyContent","style","background","Colors","description","RunAssetTags","skip","data","loading","useQuery","RUN_ASSETS_QUERY","variables","id","fetchPolicy","pipelineRunOrError","AssetKeyTagCollection","useTags","assetKeys","assets","a","key","gql","RunHeaderActions","isJob","runConfigYaml","runMetricsEnabled","tags","some","t","DagsterTag","RunMetrics","visibleDialog","setVisibleDialog","useState","rootServerURI","useContext","AppContext","refetch","RunsQueryRefetchContext","copy","useCopyToClipboard","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","copyConfig","showSharedToaster","intent","message","freeConcurrencySlots","resp","jobLink","workspacePipelineLinkForRun","repositoryName","repositoryOrigin","repositoryLocationName","Group","spacing","disabledReason","useDisabledButtonTooltipFix","disabled","label","AnchorButton","to","Popover","position","Menu","targetTagName","MenuItem","text","window","open","QUEUED","tagName","RunMetricsDialog","hasConcurrencyKeySlots","doneStatuses","has","hasDeletePermission","RunConfigDialog","isOpen","onClose","QueuedRunCriteriaDialog","DeletionDialog","onComplete","workspacePipelinePath","repoName","repoLocation","path","onTerminateInstead","selectedRuns","canTerminate","hasTerminatePermission","TerminationDialog","RunTimingTags","startTime","interactionKind","placement","padding","RunTimingDetails","Tag","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","undefined","endTime","span","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","instigationSelector","instigationType","tickId","setIsOpen","ScheduleName","ButtonLink","maxWidth","MiddleTruncate","TickDetailsDialog","COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","evaluationId","sortedKeys","useMemo","b","compare","width","vertical","horizontal","border","fontWeight","maxHeight","overflowY","url","assetDetailsPathForKey","assetKey","view","evaluation","left","right","overflow","Link","whiteSpace","RunRoot","useTrackPageView","useParams","RUN_ROOT_QUERY","snapshotID","pipelineSnapshotId","repoMatch","useRepositoryForRunWithParentSnapshot","repoAddress","match","buildRepoAddress","repository","repositoryLocation","isThisThingAJob","automaterializeTag","tag","AssetEvaluationID","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","display","flexDirection","minWidth","height","zIndex","PageHeader","Heading","fontFamily","FontFamily","monospace","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","assetKeysForRun","AssetCheckTagCollection","assetChecks","assetCheckSelection","assetSelection","RunById","runs_RunRoot","RUN_PAGE_FRAGMENT"],"sourceRoot":""}