{"version":3,"file":"static/chunks/6312.83aaeebf7a6b296a.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/backfill/BackfillStepStatusDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTerminationDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillActionsMenu.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillRow.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillStatusTagForPage.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPartitionsRequestedDialog.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillTable.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionRunList.tsx","webpack://_N_E/../ui-core/src/partitions/PartitionStepStatus.tsx","webpack://_N_E/../ui-core/src/partitions/RunMatrixUtils.tsx","webpack://_N_E/../ui-core/src/partitions/useMatrixData.tsx","webpack://_N_E/../ui-core/src/partitions/usePartitionStepQuery.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulerInfo.tsx","webpack://_N_E/../ui-core/src/schedules/makeScheduleKey.tsx","webpack://_N_E/../ui-core/src/sensors/SensorStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorBulkActionMenu.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/ui/StickyTableContainer.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx"],"sourcesContent":["import {Button, Dialog, DialogFooter} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {BackfillStepStatusDialogBackfillFragment} from './types/BackfillStepStatusDialog.types';\nimport {gql} from '../../apollo-client';\nimport {PartitionPerOpStatus} from '../../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../../runs/RunTag';\nimport {RunFilterToken} from '../../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../../workspace/types';\n\ninterface Props {\n  backfill?: BackfillStepStatusDialogBackfillFragment;\n  onClose: () => void;\n}\n\nexport function backfillCanShowStepStatus(\n  backfill?: BackfillStepStatusDialogBackfillFragment,\n): backfill is BackfillStepStatusDialogBackfillFragment & {\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n} {\n  return !!backfill && backfill.partitionSet !== null && backfill.partitionNames !== null;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfillCanShowStepStatus(backfill)) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        partitionNames={backfill.partitionNames}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.id}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillStepStatusDialogBackfillFragment on PartitionBackfill {\n    id\n    partitionNames\n    partitionSet {\n      name\n      pipelineName\n      repositoryOrigin {\n        repositoryName\n        repositoryLocationName\n      }\n    }\n  }\n`;\n\ninterface ContentProps {\n  backfill: BackfillStepStatusDialogBackfillFragment;\n  partitionSet: NonNullable<BackfillStepStatusDialogBackfillFragment['partitionSet']>;\n  partitionNames: string[];\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nconst BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  partitionNames,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = useState(60);\n  const [offset, setOffset] = useState<number>(0);\n\n  const runsFilter = useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.id}`};\n    return [token];\n  }, [backfill.id]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {Button, Dialog, DialogBody, DialogFooter} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {SINGLE_BACKFILL_CANCELABLE_RUNS_QUERY} from './BackfillRow';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {\n  BackfillTerminationDialogBackfillFragment,\n  CancelBackfillMutation,\n  CancelBackfillMutationVariables,\n} from './types/BackfillTerminationDialog.types';\nimport {gql, useMutation, useQuery} from '../../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {TerminationDialog} from '../../runs/TerminationDialog';\n\ninterface Props {\n  backfill?: BackfillTerminationDialogBackfillFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\n\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfillMutation, CancelBackfillMutationVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const {data} = useQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_CANCELABLE_RUNS_QUERY,\n    {\n      variables: {\n        backfillId: backfill?.id || '',\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !backfill,\n    },\n  );\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const unfinishedMap = useMemo(() => {\n    if (!backfill || !data || data.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {};\n    }\n    return (\n      data.partitionBackfillOrError.cancelableRuns?.reduce(\n        (accum, run) => {\n          if (run && run.runId) {\n            accum[run.runId] = true;\n          }\n          return accum;\n        },\n        {} as Record<string, boolean>,\n      ) || {}\n    );\n  }, [backfill, data]);\n  if (!backfill || !data) {\n    return null;\n  }\n\n  const numUnscheduled = backfill.numCancelable;\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.id}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={\n          !!backfill &&\n          backfill.status !== BulkActionStatus.CANCELED &&\n          (backfill.isAssetBackfill || !!numUnscheduled)\n        }\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        {backfill.isAssetBackfill ? (\n          <DialogBody>\n            Confirm cancellation of asset backfill? This will mark unfinished runs as canceled.\n          </DialogBody>\n        ) : (\n          <DialogBody>\n            There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n            yet to be queued or launched.\n          </DialogBody>\n        )}\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      {!backfill.isAssetBackfill && unfinishedMap && (\n        <TerminationDialog\n          isOpen={\n            !!backfill &&\n            (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n            !!Object.keys(unfinishedMap).length\n          }\n          onClose={onClose}\n          onComplete={onComplete}\n          selectedRuns={unfinishedMap}\n        />\n      )}\n    </>\n  );\n};\n\nexport const BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT = gql`\n  fragment BackfillTerminationDialogBackfillFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    numCancelable\n  }\n`;\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Button, Group, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {\n  BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT,\n  BackfillStepStatusDialog,\n  backfillCanShowStepStatus,\n} from './BackfillStepStatusDialog';\nimport {\n  BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT,\n  BackfillTerminationDialog,\n} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillActionsBackfillFragment} from './types/BackfillActionsMenu.types';\nimport {ResumeBackfillMutation, ResumeBackfillMutationVariables} from './types/BackfillUtils.types';\nimport {gql, useMutation} from '../../apollo-client';\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {showSharedToaster} from '../../app/DomUtils';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\n\nexport function backfillCanCancelSubmission(backfill: {\n  hasCancelPermission: boolean;\n  isAssetBackfill: boolean;\n  status: BulkActionStatus;\n  numCancelable: number;\n}) {\n  return (\n    backfill.hasCancelPermission &&\n    ((backfill.isAssetBackfill && backfill.status === BulkActionStatus.REQUESTED) ||\n      backfill.numCancelable > 0)\n  );\n}\n\nexport function backfillCanResume(backfill: {\n  hasResumePermission: boolean;\n  status: BulkActionStatus;\n  partitionSet: {__typename: 'PartitionSet'} | null;\n}) {\n  return !!(\n    backfill.hasResumePermission &&\n    backfill.status === BulkActionStatus.FAILED &&\n    backfill.partitionSet\n  );\n}\n\nexport function backfillCanCancelRuns(\n  backfill: {hasCancelPermission: boolean},\n  hasCancelableRuns: boolean,\n) {\n  if (!backfill.hasCancelPermission || !hasCancelableRuns) {\n    return false;\n  }\n  return hasCancelableRuns;\n}\n\nexport const BackfillActionsMenu = ({\n  backfill,\n  canCancelRuns,\n  refetch,\n}: {\n  backfill: BackfillActionsBackfillFragment;\n  canCancelRuns: boolean;\n  refetch: () => void;\n}) => {\n  const history = useHistory();\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.id}`,\n    },\n  ]);\n\n  const [showTerminateDialog, setShowTerminateDialog] = useState(false);\n  const [showStepStatus, setShowStepStatus] = useState(false);\n  const [resumeBackfill] = useMutation<ResumeBackfillMutation, ResumeBackfillMutationVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n\n  const resume = async () => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.id}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      await showSharedToaster({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      await showSharedToaster({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  const canCancelSubmission = backfillCanCancelSubmission(backfill);\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"View backfill runs\"\n              icon=\"settings_backup_restore\"\n              onClick={() => history.push(runsUrl)}\n            />\n            <MenuItem\n              disabled={!backfillCanShowStepStatus(backfill)}\n              text=\"View step status\"\n              icon=\"view_list\"\n              onClick={() => {\n                setShowStepStatus(true);\n              }}\n            />\n            <MenuItem\n              disabled={!backfillCanResume(backfill)}\n              text=\"Resume failed backfill\"\n              title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n              icon=\"refresh\"\n              onClick={() => resume()}\n            />\n            <MenuItem\n              text={\n                canCancelSubmission ? 'Cancel backfill submission' : 'Terminate unfinished runs'\n              }\n              icon=\"cancel\"\n              intent=\"danger\"\n              disabled={!(canCancelSubmission || canCancelRuns)}\n              onClick={() => setShowTerminateDialog(true)}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n\n      <BackfillStepStatusDialog\n        backfill={showStepStatus ? backfill : undefined}\n        onClose={() => setShowStepStatus(false)}\n      />\n      <BackfillTerminationDialog\n        backfill={showTerminateDialog ? backfill : undefined}\n        onClose={() => setShowTerminateDialog(false)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_ACTIONS_BACKFILL_FRAGMENT = gql`\n  fragment BackfillActionsBackfillFragment on PartitionBackfill {\n    id\n    hasCancelPermission\n    hasResumePermission\n    isAssetBackfill\n    status\n    numCancelable\n\n    ...BackfillStepStatusDialogBackfillFragment\n    ...BackfillTerminationDialogBackfillFragment\n  }\n\n  ${BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT}\n  ${BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT}\n`;\n","import {Box, Colors, Icon, Mono, Tag} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BackfillActionsMenu, backfillCanCancelRuns} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {QueryResult, gql, useLazyQuery} from '../../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../../asset-graph/Utils';\nimport {RunStatus} from '../../graphql/types';\nimport {PartitionStatus, PartitionStatusHealthSourceOps} from '../../partitions/PartitionStatus';\nimport {PipelineReference} from '../../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../../runs/AssetTagCollections';\nimport {CreatedByTagCell} from '../../runs/CreatedByTag';\nimport {runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../../schedules/TimestampDisplay';\nimport {useDelayedRowQuery} from '../../workspace/VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from '../../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../../workspace/workspacePath';\n\ninterface BackfillRowProps {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  showBackfillTarget: boolean;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n  refetch: () => void;\n}\n\nexport const BackfillRow = (props: BackfillRowProps) => {\n  const statusUnsupported =\n    props.backfill.numPartitions === null ||\n    props.backfill.partitionNames === null ||\n    props.backfill.isAssetBackfill;\n\n  if (statusUnsupported) {\n    return <BackfillRowContent {...props} hasCancelableRuns={false} statusQueryResult={null} />;\n  }\n  return (\n    <BackfillRowLoader backfillId={props.backfill.id}>\n      {(data) => <BackfillRowContent {...props} {...data} />}\n    </BackfillRowLoader>\n  );\n};\n\ninterface LoadResult {\n  hasCancelableRuns: boolean;\n  statusQueryResult: QueryResult<any, any> | null;\n}\n\nexport const BackfillRowLoader = (props: {\n  backfillId: string;\n  children: (data: LoadResult) => React.ReactNode;\n}) => {\n  const {backfillId} = props;\n\n  const cancelableRuns = useLazyQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_CANCELABLE_RUNS_QUERY,\n    {\n      variables: {backfillId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const [statusQueryFn, statusQueryResult] = cancelableRuns;\n\n  useDelayedRowQuery(statusQueryFn);\n  useQueryRefreshAtInterval(statusQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = statusQueryResult;\n  const {hasCancelableRuns} = React.useMemo(() => {\n    if (data?.partitionBackfillOrError.__typename === 'PartitionBackfill') {\n      return {hasCancelableRuns: data.partitionBackfillOrError.cancelableRuns.length > 0};\n    }\n    return {hasCancelableRuns: false};\n  }, [data]);\n\n  return props.children({hasCancelableRuns, statusQueryResult});\n};\n\nexport const BackfillRowContent = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onShowPartitionsRequested,\n  refetch,\n  hasCancelableRuns,\n  statusQueryResult,\n}: BackfillRowProps & LoadResult) => {\n  const repoAddress = backfill.partitionSet\n    ? buildRepoAddress(\n        backfill.partitionSet.repositoryOrigin.repositoryName,\n        backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const renderBackfillStatus = () =>\n    statusQueryResult?.loading ? (\n      <div style={{color: Colors.textLight()}}>Loading</div>\n    ) : (\n      <BackfillStatusTagForPage backfill={backfill} />\n    );\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono>\n          <Link\n            to={\n              backfill.isAssetBackfill\n                ? `/overview/backfills/${backfill.id}`\n                : runsPathWithFilters([\n                    {\n                      token: 'tag',\n                      value: `dagster/backfill=${backfill.id}`,\n                    },\n                  ])\n            }\n          >\n            {backfill.id}\n          </Link>\n        </Mono>\n      </td>\n      <td style={{width: 220}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td style={{width: '20%'}}>\n          <BackfillTarget backfill={backfill} repoAddress={repoAddress} />\n        </td>\n      ) : null}\n      <td style={{width: allPartitions ? 300 : 140}}>\n        <BackfillRequestedRange\n          backfill={backfill}\n          allPartitions={allPartitions}\n          onExpand={() => onShowPartitionsRequested(backfill)}\n        />\n      </td>\n      <td style={{width: 160}}>\n        <CreatedByTagCell tags={backfill.tags} repoAddress={repoAddress} />\n      </td>\n      <td style={{width: 140}}>{renderBackfillStatus()}</td>\n      <td>\n        <BackfillActionsMenu\n          backfill={backfill}\n          canCancelRuns={backfillCanCancelRuns(backfill, hasCancelableRuns)}\n          refetch={refetch}\n        />\n      </td>\n    </tr>\n  );\n};\n\nconst BackfillTarget = ({\n  backfill,\n  repoAddress,\n}: {\n  backfill: BackfillTableFragment;\n  repoAddress: RepoAddress | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const isHiddenAssetPartitionSet = isHiddenAssetGroupJob(partitionSetName || '');\n\n  const buildHeader = () => {\n    if (isHiddenAssetPartitionSet) {\n      return null;\n    }\n    if (partitionSet && repo) {\n      return (\n        <Link\n          style={{fontWeight: 500}}\n          to={workspacePipelinePath({\n            repoName: partitionSet.repositoryOrigin.repositoryName,\n            repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n            pipelineName: partitionSet.pipelineName,\n            isJob: isThisThingAJob(repo, partitionSet.pipelineName),\n            path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n          })}\n        >\n          {partitionSet.name}\n        </Link>\n      );\n    }\n    if (partitionSetName) {\n      return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n    }\n    return null;\n  };\n\n  const buildRepoLink = () =>\n    repoAddress ? (\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n        <Icon name=\"repo\" color={Colors.textLight()} />\n        <Link to={workspacePathFromAddress(repoAddress)}>\n          {repoAddressAsHumanString(repoAddress)}\n        </Link>\n      </Box>\n    ) : undefined;\n\n  const buildPipelineOrAssets = () => {\n    if (assetSelection?.length) {\n      return <AssetKeyTagCollection assetKeys={assetSelection} dialogTitle=\"Assets in backfill\" />;\n    }\n    if (partitionSet && repo) {\n      return (\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isThisThingAJob(repo, partitionSet.pipelineName)}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      {buildHeader()}\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {buildRepoLink()}\n        {buildPipelineOrAssets()}\n      </Box>\n    </Box>\n  );\n};\n\nconst BackfillRequestedRange = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onExpand: () => void;\n}) => {\n  const {partitionNames, numPartitions} = backfill;\n\n  if (numPartitions === null) {\n    return <span />;\n  }\n\n  const numPartitionsLabel = `${numPartitions.toLocaleString()} ${\n    numPartitions === 1 ? 'partition' : 'partitions'\n  }`;\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        {partitionNames ? (\n          <TagButton onClick={onExpand}>\n            <Tag intent=\"primary\" interactive>\n              {numPartitionsLabel}\n            </Tag>\n          </TagButton>\n        ) : (\n          <Tag intent=\"primary\">{numPartitionsLabel}</Tag>\n        )}\n      </div>\n      {allPartitions && partitionNames && (\n        <RequestedPartitionStatusBar all={allPartitions} requested={partitionNames} />\n      )}\n    </Box>\n  );\n};\n\nconst RequestedPartitionStatusBar = ({all, requested}: {all: string[]; requested: string[]}) => {\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        requested && requested.includes(key) ? RunStatus.QUEUED : RunStatus.NOT_STARTED,\n    }),\n    [requested],\n  );\n  return <PartitionStatus small hideStatusTooltip partitionNames={all} health={health} />;\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SINGLE_BACKFILL_CANCELABLE_RUNS_QUERY = gql`\n  query SingleBackfillQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        cancelableRuns {\n          id\n          runId\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Box, Tag} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {showCustomAlert} from '../../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {PythonErrorFragment} from '../../app/types/PythonErrorFragment.types';\nimport {BulkActionStatus} from '../../graphql/types';\n\ntype BackfillState = {\n  status: BulkActionStatus;\n  error: PythonErrorFragment | null;\n};\n\nexport const BackfillStatusTagForPage = ({backfill}: {backfill: BackfillState}) => {\n  const {status, error} = backfill;\n  function errorState(status: string) {\n    return (\n      <Box margin={{bottom: 12}}>\n        <TagButton\n          onClick={() =>\n            error && showCustomAlert({title: 'Error', body: <PythonErrorInfo error={error} />})\n          }\n        >\n          <Tag intent=\"danger\">{status}</Tag>\n        </TagButton>\n      </Box>\n    );\n  }\n\n  switch (status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In progress</Tag>;\n\n    case BulkActionStatus.CANCELING:\n      return errorState('Canceling');\n    case BulkActionStatus.CANCELED:\n      return errorState('Canceled');\n    case BulkActionStatus.FAILED:\n      return errorState('Failed');\n    case BulkActionStatus.COMPLETED:\n      return <Tag intent=\"success\">Completed</Tag>;\n    case BulkActionStatus.COMPLETED_SUCCESS:\n      return <Tag intent=\"success\">Succeeded</Tag>;\n    case BulkActionStatus.COMPLETED_FAILED:\n      return errorState('Failed');\n    default:\n      return <Tag>{status}</Tag>;\n  }\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n","import {Button, Dialog, DialogFooter, FontFamily} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {VirtualizedItemListForDialog} from '../../ui/VirtualizedItemListForDialog';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base', numeric: true});\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '16px', fontFamily: FontFamily.monospace}}>{backfill?.id}</span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogContent partitionNames={backfill?.partitionNames || []} />\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface DialogContentProps {\n  partitionNames: string[];\n}\n\n// Separate component so that we can delay sorting until render.\nconst DialogContent = (props: DialogContentProps) => {\n  const {partitionNames} = props;\n\n  const sorted = useMemo(() => {\n    return [...(partitionNames || [])].sort((a, b) => COLLATOR.compare(a, b));\n  }, [partitionNames]);\n\n  return (\n    <div style={{height: '340px', overflow: 'hidden'}}>\n      <VirtualizedItemListForDialog\n        items={sorted}\n        renderItem={(partitionName) => (\n          <div key={partitionName}>\n            <TruncatedTextWithFullTextOnHover text={partitionName} />\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n","import {Table} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT} from './BackfillActionsMenu';\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillRow} from './BackfillRow';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {gql} from '../../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [partitionsRequestedBackfill, setPartitionsRequestedBackfill] =\n    useState<BackfillTableFragment>();\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th>Backfill ID</th>\n            <th>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            <th>Requested</th>\n            <th>Launched by</th>\n            <th>Backfill status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill) => (\n            <BackfillRow\n              key={backfill.id}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n              refetch={refetch}\n            />\n          ))}\n        </tbody>\n      </Table>\n\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    isValidSerialization\n    partitionNames\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      ...PartitionSetForBackfillTable\n    }\n    assetSelection {\n      path\n    }\n    tags {\n      key\n      value\n    }\n    error {\n      ...PythonErrorFragment\n    }\n    ...BackfillActionsBackfillFragment\n  }\n\n  fragment PartitionSetForBackfillTable on PartitionSet {\n    id\n    name\n    mode\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n","import {NonIdealState, Spinner} from '@dagster-io/ui-components';\n\nimport {\n  PartitionRunListQuery,\n  PartitionRunListQueryVariables,\n} from './types/PartitionRunList.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunTable} from '../runs/RunTable';\nimport {RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTableRunFragment';\nimport {DagsterTag} from '../runs/RunTag';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList = (props: PartitionRunListProps) => {\n  const queryResult = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  const {data, loading} = queryResult;\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  MiddleTruncate,\n  Popover,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  TopLabelTilted,\n  topLabelHeightForLabels,\n} from './RunMatrixUtils';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatus.types';\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  MatrixData,\n  MatrixStep,\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n  PartitionRuns,\n  StatusSquareColor,\n  useMatrixData,\n} from './useMatrixData';\nimport {gql, useQuery} from '../apollo-client';\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  Range,\n  partitionStatusAtIndex,\n} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {RunStatus} from '../graphql/types';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\ninterface PartitionPerAssetStatusProps\n  extends Omit<PartitionStepStatusBaseProps, 'partitionNames'> {\n  assetHealth: PartitionHealthData[];\n  assetQueryItems: GraphQueryItem[];\n  rangeDimensionIdx: number;\n  rangeDimension: PartitionHealthDimension;\n}\n\nexport const PartitionPerAssetStatus = React.memo(\n  ({\n    assetHealth,\n    rangeDimension,\n    rangeDimensionIdx,\n    assetQueryItems,\n    ...rest\n  }: PartitionPerAssetStatusProps) => {\n    const rangesByAssetKey = useMemo(() => {\n      const rangesByAssetKey: {[assetKey: string]: Range[]} = {};\n      for (const a of assetHealth) {\n        if (a.dimensions[rangeDimensionIdx]?.name !== rangeDimension.name) {\n          // Ignore assets in the job / graph that do not have the range partition dimension.\n          continue;\n        }\n        const ranges = a.rangesForSingleDimension(rangeDimensionIdx);\n        rangesByAssetKey[tokenForAssetKey(a.assetKey)] = ranges;\n      }\n      return rangesByAssetKey;\n    }, [assetHealth, rangeDimension.name, rangeDimensionIdx]);\n\n    const layoutBoxesWithRangeDimension = useMemo(() => {\n      const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n      return layout.boxes.filter((b) => !!rangesByAssetKey[b.node.name]);\n    }, [assetQueryItems, rangesByAssetKey]);\n\n    const data: MatrixData = useMemo(\n      () => ({\n        stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n          x: box.x,\n          name: box.node.name,\n          totalFailurePercent: 0,\n          finalFailurePercent: 0,\n        })),\n        partitions: [],\n        partitionColumns: rangeDimension.partitionKeys.map((partitionKey, partitionKeyIdx) => ({\n          idx: partitionKeyIdx,\n          name: partitionKey,\n          runsLoaded: true,\n          runs: [],\n          steps: layoutBoxesWithRangeDimension.map((box) => ({\n            name: box.node.name,\n            unix: 0,\n            color: assetPartitionStatusToSquareColor(\n              partitionStatusAtIndex(rangesByAssetKey[box.node.name]!, partitionKeyIdx),\n            ),\n          })),\n        })),\n      }),\n      [layoutBoxesWithRangeDimension, rangeDimension.partitionKeys, rangesByAssetKey],\n    );\n\n    return (\n      <PartitionStepStatus\n        {...rest}\n        partitionNames={rangeDimension.partitionKeys}\n        data={data}\n        showLatestRun={false}\n      />\n    );\n  },\n);\n\nconst assetPartitionStatusToSquareColor = (state: AssetPartitionStatus[]): StatusSquareColor => {\n  return state.includes(AssetPartitionStatus.MATERIALIZED) &&\n    state.includes(AssetPartitionStatus.MISSING)\n    ? 'SUCCESS-MISSING'\n    : state.includes(AssetPartitionStatus.MATERIALIZED)\n    ? 'SUCCESS'\n    : state.includes(AssetPartitionStatus.FAILED) && state.includes(AssetPartitionStatus.MISSING)\n    ? 'FAILURE-MISSING'\n    : state.includes(AssetPartitionStatus.FAILED)\n    ? 'FAILURE'\n    : 'MISSING';\n};\n\ninterface PartitionPerOpStatusProps extends PartitionStepStatusBaseProps {\n  repoAddress: RepoAddress;\n  partitions: PartitionRuns[];\n}\n\nexport const PartitionPerOpStatus = React.memo(\n  ({repoAddress, pipelineName, partitions, partitionNames, ...rest}: PartitionPerOpStatusProps) => {\n    // Retrieve the pipeline's structure\n    const repositorySelector = repoAddressToSelector(repoAddress);\n    const pipelineSelector = {...repositorySelector, pipelineName};\n    const pipeline = useQuery<\n      PartitionStepStatusPipelineQuery,\n      PartitionStepStatusPipelineQueryVariables\n    >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n      variables: {pipelineSelector},\n      fetchPolicy: 'no-cache',\n    });\n\n    const solidHandles =\n      pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n      pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n    const data = useMatrixData(\n      useMemo(\n        () => ({\n          partitionNames,\n          partitions,\n          stepQuery: '',\n          solidHandles,\n        }),\n        [partitionNames, partitions, solidHandles],\n      ),\n    );\n\n    if (!data) {\n      return <span />;\n    }\n    return (\n      <PartitionStepStatus\n        {...rest}\n        showLatestRun={true}\n        pipelineName={pipelineName}\n        partitionNames={partitionNames}\n        data={data}\n      />\n    );\n  },\n);\n\ninterface PartitionStepStatusProps extends PartitionStepStatusBaseProps {\n  data: MatrixData;\n  showLatestRun: boolean;\n}\n\nconst PartitionStepStatus = React.memo((props: PartitionStepStatusProps) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => ((stepsByName as any)[step.name] = step));\n    return stepRows.map((stepRow) => (stepsByName as any)[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = useMemo(\n    () => partitionColumns.slice(visibleStart, visibleEnd),\n    [partitionColumns, visibleEnd, visibleStart],\n  );\n  const [minUnix, maxUnix] = useMemo(\n    () => timeboundsOfPartitions(partitionColumns),\n    [partitionColumns],\n  );\n  const topLabelHeight = useMemo(\n    () => topLabelHeightForLabels(partitionColumns.map((p) => p.name)),\n    [partitionColumns],\n  );\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x, paddingRight: 8}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                <MiddleTruncate text={step.name} />\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n});\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${Colors.keylineDefault()};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: ${Colors.backgroundDefault()};\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: ${Colors.backgroundDefaultHover()};\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.keylineDefault()};\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare = React.memo(\n  ({\n    step,\n    runs,\n    runsLoaded,\n    hovered,\n    setHovered,\n    setFocused,\n    partitionName,\n  }: {\n    step?: MatrixStep;\n    runs: PartitionMatrixStepRunFragment[];\n    runsLoaded: boolean;\n    hovered: PartitionRunSelection | null;\n    minUnix: number;\n    maxUnix: number;\n    partitionName: string;\n    setHovered: (hovered: PartitionRunSelection | null) => void;\n    setFocused: (hovered: PartitionRunSelection | null) => void;\n  }) => {\n    const [opened, setOpened] = useState(false);\n    let squareStatus;\n\n    if (!runsLoaded) {\n      squareStatus = 'loading';\n    } else if (step) {\n      squareStatus = step.color.toLowerCase();\n    } else if (runs.length === 0) {\n      squareStatus = 'empty';\n    } else {\n      const runStatus = [...runs].reverse().find((r) => r.status !== RunStatus.CANCELED)?.status;\n      if (runStatus) {\n        squareStatus = runStatus.toLowerCase();\n      } else {\n        squareStatus = 'empty';\n      }\n    }\n    const content = (\n      <div\n        className={`square ${squareStatus}`}\n        onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n        onMouseLeave={() => setHovered(null)}\n        data-tooltip={\n          runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n        }\n        data-tooltip-style={TOOLTIP_STYLE}\n      />\n    );\n\n    if (\n      !opened &&\n      (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n    ) {\n      return content;\n    }\n\n    return (\n      <Popover\n        interactionKind=\"click\"\n        placement=\"bottom-start\"\n        onOpening={() => setOpened(true)}\n        onClosed={() => setOpened(false)}\n        content={\n          <Menu>\n            <MenuLink\n              icon=\"open_in_new\"\n              text=\"Show logs from last run\"\n              to={linkToRunEvent(runs[runs.length - 1]!, {stepKey: step ? step.name : null})}\n            />\n            <MenuItem\n              icon=\"settings_backup_restore\"\n              text={`View runs (${runs.length})`}\n              onClick={() => setFocused({stepName: step?.name, partitionName})}\n            />\n          </Menu>\n        }\n      >\n        {content}\n      </Popover>\n    );\n  },\n);\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nexport const BOX_SIZE = 32;\n\nconst STEP_STATUS_COLORS = {\n  SUCCESS: Colors.accentGreen(),\n  SUCCESS_SKIPPED: Colors.accentGreenHover(),\n  FAILURE: Colors.accentRed(),\n  FAILURE_SKIPPED: Colors.accentRedHover(),\n  SKIPPED: Colors.accentYellow(),\n  IN_PROGRESS: Colors.accentBlue(),\n};\n\n// In CSS, you can layer multiple backgrounds on top of each other by comma-separating values in\n// `background`. However, this only works with gradients, not with primitive color values. To do\n// hovered + red without color math (?), just stack the colors as flat gradients.\nconst flatGradient = (color: string) => `linear-gradient(to left, ${color} 0%, ${color} 100%)`;\nconst flatGradientStack = (colors: string[]) => colors.map(flatGradient).join(',');\n\nexport const GridColumn = styled.div<{\n  disabled?: boolean;\n  hovered?: boolean;\n  focused?: boolean;\n  multiselectFocused?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  line-height: 0;\n\n  ${({disabled, focused, multiselectFocused, hovered}) =>\n    !disabled &&\n    !focused &&\n    !multiselectFocused &&\n    `&${hovered ? '' : ':hover'} {\n      background: ${Colors.backgroundDefaultHover()};\n      cursor: default;\n      ${TopLabelTiltedInner} {\n        background: ${Colors.backgroundDefaultHover()};\n        .tilted {\n          background: ${Colors.backgroundLight()};\n        }\n      }\n      .square {\n        filter: brightness(95%);\n      }\n    }`}\n\n  ${({disabled}) =>\n    disabled &&\n    `\n      ${TopLabelTiltedInner} {\n        color: ${Colors.textLight()}\n      }\n    `}\n\n  ${({focused}) =>\n    focused &&\n    `background: ${Colors.accentBlue()};\n    ${LeftLabel} {\n      color: ${Colors.accentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.accentPrimary()};\n      color: ${Colors.accentReversed()};\n      .tilted {\n        background: ${Colors.accentBlue()};\n      }\n    }\n  }`}\n\n  ${({multiselectFocused}) =>\n    multiselectFocused &&\n    `background: ${Colors.accentBlueHover()};\n    ${LeftLabel} {\n      color: ${Colors.accentReversed()};\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.accentPrimary()};\n      color: ${Colors.accentReversed()};\n      .tilted {\n        background: ${Colors.accentBlueHover()};\n      }\n    }\n  }`}\n\n  .cell {\n    height: ${BOX_SIZE}px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 12px;\n    padding: 2px;\n    box-sizing: border-box;\n    line-height: initial;\n  }\n\n  .square {\n    width: 20px;\n    height: 20px;\n    margin: 6px;\n    display: inline-block;\n\n    &:hover:not(.empty):before {\n      box-shadow: ${Colors.accentBlue()} 0 0 0 3px;\n    }\n    &:before {\n      content: ' ';\n      background: ${Colors.accentGray()};\n      border-radius: 10px;\n      display: inline-block;\n      width: 20px;\n      height: 20px;\n    }\n    &.loading {\n      &:before {\n        background: radial-gradient(\n          ${Colors.backgroundGray()} 0%,\n          ${Colors.backgroundGray()} 45%,\n          ${Colors.backgroundGrayHover()} 60%\n        );\n      }\n    }\n    &.success {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS};\n      }\n    }\n    &.failure {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE};\n      }\n    }\n    &.success-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS_SKIPPED};\n      }\n    }\n    &.failure-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.failure-blank {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.skipped {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SKIPPED};\n      }\n    }\n    &.started,\n    &.starting,\n    &.canceling {\n      &:before {\n        background: ${STEP_STATUS_COLORS.IN_PROGRESS};\n      }\n    }\n  }\n`;\n\nexport const LeftLabel = styled.div<{hovered?: boolean}>`\n  height: ${BOX_SIZE}px;\n  line-height: ${BOX_SIZE}px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  background: ${({hovered}) =>\n    flatGradientStack([hovered ? Colors.backgroundLight() : 'transparent'])};\n`;\n\nexport const TopLabel = styled.div`\n  position: relative;\n  height: 70px;\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst TITLE_MARGIN_BOTTOM = 15;\nconst ROTATION_DEGREES = 41;\n\nexport function topLabelHeightForLabels(labels: string[]) {\n  let maxLength = 0;\n  for (const label of labels) {\n    maxLength = Math.max(maxLength, label.length);\n  }\n  return (maxLength > 10 ? maxLength * 4.9 : 55) + TITLE_MARGIN_BOTTOM;\n}\n\nexport const TopLabelTilted = ({label, $height}: {label: string; $height: number}) => {\n  return (\n    <TopLabelTiltedInner style={{height: $height - TITLE_MARGIN_BOTTOM}}>\n      <div className=\"tilted\">{label}</div>\n    </TopLabelTiltedInner>\n  );\n};\n\nconst TopLabelTiltedInner = styled.div`\n  position: relative;\n  height: unset; /* provide via style tag */\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  margin-bottom: ${TITLE_MARGIN_BOTTOM}px;\n  align-items: end;\n  display: flex;\n  line-height: normal;\n\n  & > div.tilted {\n    font-size: 12px;\n    white-space: nowrap;\n    position: absolute;\n    bottom: -20px;\n    left: 0;\n    padding: 2px;\n    padding-right: 4px;\n    padding-left: 0;\n    transform: rotate(-${ROTATION_DEGREES}deg);\n    transform-origin: top left;\n  }\n`;\n\nexport const GRID_FLOATING_CONTAINER_WIDTH = 330;\n\nexport const GridFloatingContainer = styled.div<{floating: boolean}>`\n  display: flex;\n  border-right: 1px solid ${Colors.borderDefault()};\n  padding-bottom: 16px;\n  width: ${GRID_FLOATING_CONTAINER_WIDTH}px;\n  z-index: 1;\n  ${({floating}) => (floating ? 'box-shadow: 1px 0 4px rgba(0, 0, 0, 0.15)' : '')};\n`;\n","import {\n  PartitionMatrixSolidHandleFragment,\n  PartitionMatrixStepRunFragment,\n} from './types/useMatrixData.types';\nimport {gql} from '../apollo-client';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {StepEventStatus} from '../graphql/types';\nimport {useThrottledMemo} from '../hooks/useThrottledMemo';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\n\nexport type StatusSquareColor =\n  | 'SUCCESS'\n  | 'FAILURE'\n  | 'MISSING'\n  | 'FAILURE-MISSING'\n  | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\ninterface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagster 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nfunction isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitionsByName: Record<string, PartitionRuns>,\n  options?: DisplayOptions,\n) {\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = (partitionsByName as any)[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1]!;\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx]!;\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii]!.finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii]!.runs.length === 0 ||\n        partitionColumns[ii]!.steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = ({\n  solidHandles,\n  stepQuery,\n  partitionNames,\n  partitions,\n  options,\n}: MatrixDataInputs) => {\n  return useThrottledMemo(\n    () => {\n      const nodes = solidHandles\n        ? explodeCompositesInHandleGraph(solidHandles).map((h) => h.solid)\n        : [];\n      // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n      const solidsFiltered = filterByQuery(nodes, stepQuery);\n      const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n      const partitionsByName: Record<string, PartitionRuns> = {};\n      partitions.forEach((p) => {\n        // sort partition runs in place\n        p.runs.sort(byStartTimeAsc);\n        partitionsByName[p.name] = p;\n      });\n      // Build the matrix of step + partition squares - presorted to match the gantt layout\n      return buildMatrixData(layout, partitionNames, partitionsByName, options);\n    },\n    [solidHandles, stepQuery, partitions, partitionNames, options],\n    1000,\n  );\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {useEffect, useMemo, useRef, useState} from 'react';\n\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  PartitionStepLoaderQuery,\n  PartitionStepLoaderQueryVariables,\n} from './types/usePartitionStepQuery.types';\nimport {PARTITION_MATRIX_STEP_RUN_FRAGMENT, PartitionRuns} from './useMatrixData';\nimport {ApolloClient, gql, useApolloClient} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {RepositorySelector, RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = useRef(0);\n  const [dataState, setDataState] = useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = useMemo(\n    () =>\n      JSON.stringify([\n        ...runsFilter.map((token) => {\n          const [key, value] = token.value.split('=');\n          return {key, value};\n        }),\n        {\n          key: DagsterTag.RepositoryLabelTag,\n          value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n        },\n      ]),\n    [repositorySelector.repositoryLocationName, repositorySelector.repositoryName, runsFilter],\n  );\n\n  const partitionNamesSet = useMemo(() => new Set(partitionNames), [partitionNames]);\n\n  useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: ReturnType<typeof setInterval> = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNamesSet.has(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.id === r.id))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n    partitionNamesSet,\n  ]);\n\n  return useMemo(\n    () => assemblePartitions(dataState, partitionTagName),\n    [dataState, partitionTagName],\n  );\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'no-cache',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]!);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from './ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from './types/ScheduleMutations.types';\nimport {useMutation} from '../apollo-client';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type ScheduleInfo = {\n  repoAddress: RepoAddress;\n  scheduleName: string;\n  scheduleState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  schedules: ScheduleInfo[];\n}\n\nexport const ScheduleStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, schedules} = props;\n  const count = schedules.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (schedule: ScheduleInfo) => {\n    const {repoAddress, scheduleName} = schedule;\n    const variables = {\n      scheduleSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        scheduleName,\n      },\n    };\n\n    const {data} = await startSchedule({variables});\n\n    switch (data?.startSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.startSchedule.message,\n        });\n    }\n  };\n\n  const stop = async (schedule: ScheduleInfo) => {\n    const {scheduleName, scheduleState} = schedule;\n    const variables = {\n      id: scheduleState.id,\n    };\n\n    const {data} = await stopSchedule({variables});\n\n    switch (data?.stopRunningSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.stopRunningSchedule.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const schedule of schedules) {\n      if (openWithIntent === 'start') {\n        await start(schedule);\n      } else {\n        await stop(schedule);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'schedule' : 'schedules'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'schedule' : 'schedules'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Schedules are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stopping ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while schedules are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((scheduleName) => (\n                <li key={scheduleName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{scheduleName}:</strong>\n                    {errors[scheduleName] ? <div>{errors[scheduleName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start schedules' : 'Stop schedules'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {ScheduleInfo, ScheduleStateChangeDialog} from './ScheduleStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  schedules: ScheduleInfo[];\n  onDone: () => void;\n}\n\nexport const ScheduleBulkActionMenu = (props: Props) => {\n  const {schedules, onDone} = props;\n  const count = schedules.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(schedules.map(({scheduleState}) => scheduleState));\n  }, [schedules]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <ScheduleStateChangeDialog\n        openWithIntent={openWithIntent}\n        schedules={schedules}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo = ({daemonHealth, ...boxProps}: Props) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths.length > 0) {\n      const schedulerHealth = schedulerHealths[0]!;\n      healthy = schedulerHealth.required && schedulerHealth.healthy;\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeScheduleKey = (repoAddress: RepoAddress, scheduleName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${scheduleName}`;\n};\n","// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from './SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from './types/SensorMutations.types';\nimport {useMutation} from '../apollo-client';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorInfo = {\n  repoAddress: RepoAddress;\n  sensorName: string;\n  sensorState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  sensors: SensorInfo[];\n}\n\nexport const SensorStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, sensors} = props;\n  const count = sensors.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const start = async (sensor: SensorInfo) => {\n    const {repoAddress, sensorName} = sensor;\n    const variables = {\n      sensorSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        sensorName,\n      },\n    };\n\n    const {data} = await startSensor({variables});\n\n    switch (data?.startSensor.__typename) {\n      case 'Sensor':\n        dispatch({type: 'update-success'});\n        return;\n      case 'SensorNotFoundError':\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.startSensor.message,\n        });\n    }\n  };\n\n  const stop = async (sensor: SensorInfo) => {\n    const {sensorName, sensorState} = sensor;\n    const variables = {\n      id: sensorState.id,\n    };\n\n    const {data} = await stopSensor({variables});\n\n    switch (data?.stopSensor.__typename) {\n      case 'StopSensorMutationResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.stopSensor.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const sensor of sensors) {\n      if (openWithIntent === 'start') {\n        await start(sensor);\n      } else {\n        await stop(sensor);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'sensor' : 'sensors'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'sensor' : 'sensors'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Sensors are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stopping ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>Please do not close the window or navigate away while sensors are being updated.</div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`\n                  : `Could not stop ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((sensorName) => (\n                <li key={sensorName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{sensorName}:</strong>\n                    {errors[sensorName] ? <div>{errors[sensorName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start sensors' : 'Stop sensors'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {SensorInfo, SensorStateChangeDialog} from './SensorStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  sensors: SensorInfo[];\n  onDone: () => void;\n}\n\nexport const SensorBulkActionMenu = (props: Props) => {\n  const {sensors, onDone} = props;\n  const count = sensors.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(sensors.map(({sensorState}) => sensorState));\n  }, [sensors]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <SensorStateChangeDialog\n        openWithIntent={openWithIntent}\n        sensors={sensors}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\ninterface Props {\n  $top?: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top = 0}) => $top}px;\n    background-color: ${Colors.backgroundDefault()};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.keylineDefault()};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {Box, MiddleTruncate} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n"],"names":["backfillCanShowStepStatus","backfill","partitionSet","partitionNames","BackfillStepStatusDialog","onClose","param","jsx_runtime","jsxs","Dialog","isOpen","title","concat","id","style","width","content","repoAddress","buildRepoAddress","repositoryOrigin","repositoryName","repositoryLocationName","jsx","BackfillStepStatusDialogContent","DialogFooter","topBorder","Button","onClick","BACKFILL_STEP_STATUS_DIALOG_BACKFILL_FRAGMENT","gql","pageSize","setPageSize","useState","offset","setOffset","runsFilter","useMemo","token","value","partitions","usePartitionStepQuery","partitionSetName","name","partitionTagName","DagsterTag","Partition","repositorySelector","repoAddressToSelector","jobName","pipelineName","skipQuery","PartitionPerOpStatus","BackfillTerminationDialog","onComplete","cancelBackfill","useMutation","CANCEL_BACKFILL_MUTATION","data","useQuery","SINGLE_BACKFILL_CANCELABLE_RUNS_QUERY","variables","backfillId","notifyOnNetworkStatusChange","skip","isSubmitting","setIsSubmitting","unfinishedMap","partitionBackfillOrError","__typename","cancelableRuns","reduce","accum","run","runId","numUnscheduled","numCancelable","cancel","Fragment","status","BulkActionStatus","CANCELED","isAssetBackfill","DialogBody","intent","disabled","TerminationDialog","Object","keys","length","selectedRuns","BACKFILL_TERMINATION_DIALOG_BACKFILL_FRAGMENT","PYTHON_ERROR_FRAGMENT","backfillCanCancelRuns","hasCancelableRuns","hasCancelPermission","BackfillActionsMenu","canCancelRuns","refetch","history","useHistory","runsUrl","runsPathWithFilters","showTerminateDialog","setShowTerminateDialog","showStepStatus","setShowStepStatus","resumeBackfill","RESUME_BACKFILL_MUTATION","resume","resumePartitionBackfill","showSharedToaster","message","Group","direction","spacing","div","icon","error","action","text","showCustomAlert","body","PythonErrorInfo","canCancelSubmission","REQUESTED","Popover","position","Menu","MenuItem","push","hasResumePermission","FAILED","Icon","undefined","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","BackfillRow","props","numPartitions","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","BackfillRowContent","statusQueryResult","BackfillRowLoader","statusQueryFn","useLazyQuery","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","React","children","allPartitions","showBackfillTarget","onShowPartitionsRequested","tr","td","Mono","Link","to","timestamp","TimestampDisplay","BackfillTarget","BackfillRequestedRange","onExpand","CreatedByTagCell","tags","loading","color","Colors","BackfillStatusTagForPage","repo","useRepository","assetSelection","isHiddenAssetPartitionSet","isHiddenAssetGroupJob","Box","flex","gap","fontWeight","workspacePipelinePath","repoName","repoLocation","isJob","isThisThingAJob","path","encodeURIComponent","span","fontSize","alignItems","workspacePathFromAddress","repoAddressAsHumanString","AssetKeyTagCollection","assetKeys","dialogTitle","PipelineReference","showIcon","size","pipelineHrefContext","location","numPartitionsLabel","toLocaleString","TagButton","Tag","interactive","RequestedPartitionStatusBar","all","requested","health","runStatusForPartitionKey","includes","key","RunStatus","QUEUED","NOT_STARTED","PartitionStatus","small","hideStatusTooltip","styled","button","withConfig","errorState","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","margin","bottom","CANCELING","COMPLETED","COMPLETED_SUCCESS","COMPLETED_FAILED","COLLATOR","Intl","Collator","navigator","language","sensitivity","numeric","BackfillPartitionsRequestedDialog","fontFamily","FontFamily","monospace","DialogContent","sorted","sort","a","b","compare","height","overflow","VirtualizedItemListForDialog","items","renderItem","TruncatedTextWithFullTextOnHover","partitionName","BackfillTable","backfills","partitionsRequestedBackfill","setPartitionsRequestedBackfill","Table","thead","th","tbody","map","BACKFILL_TABLE_FRAGMENT","PartitionRunList","PARTITION_RUN_LIST_QUERY","filter","Spinner","purpose","pipelineRunsOrError","NonIdealState","description","RunTable","runs","results","RUN_TABLE_RUN_FRAGMENT","getVisibleItemCount","Math","ceil","viewportWidth","BOX_SIZE","timeboundsOfPartitions","minUnix","maxUnix","Date","now","partition","partitionColumns","step","steps","unix","min","max","PartitionPerAssetStatus","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","rangesByAssetKey","dimensions","ranges","rangesForSingleDimension","tokenForAssetKey","assetKey","layoutBoxesWithRangeDimension","layout","buildLayout","nodes","mode","GanttChartMode","FLAT","boxes","node","stepRows","x","box","totalFailurePercent","finalFailurePercent","partitionKeys","partitionKey","partitionKeyIdx","idx","runsLoaded","assetPartitionStatusToSquareColor","partitionStatusAtIndex","PartitionStepStatus","showLatestRun","state","AssetPartitionStatus","MATERIALIZED","MISSING","pipeline","pipelineSelector","PARTITION_STEP_STATUS_PIPELINE_QUERY","fetchPolicy","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","viewport","containerProps","useViewport","hovered","setHovered","focused","setFocused","useEffect","sortPartitionSteps","stepsByName","forEach","stepRow","visibleCount","visibleStart","visibleEnd","visibleColumns","slice","topLabelHeight","topLabelHeightForLabels","p","PartitionRunMatrixContainer","padding","autoFocus","display","GridFloatingContainer","floating","GridColumn","flexShrink","TopLabel","LeftLabel","paddingLeft","Divider","paddingRight","data-tooltip","stepName","MiddleTruncate","PagerControl","$direction","right","zIndex","TopLabelTilted","$height","label","textAlign","PartitionSquare","s","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","top","left","squareStatus","opened","setOpened","toLowerCase","_reverse_find","runStatus","reverse","find","r","className","onMouseEnter","onMouseLeave","data-tooltip-style","interactionKind","placement","onOpening","onClosed","MenuLink","linkToRunEvent","stepKey","STEP_STATUS_COLORS","SUCCESS","SUCCESS_SKIPPED","FAILURE","FAILURE_SKIPPED","SKIPPED","IN_PROGRESS","flatGradient","flatGradientStack","colors","join","multiselectFocused","TopLabelTiltedInner","labels","maxLength","GRID_FLOATING_CONTAINER_WIDTH","MISSING_STEP_STATUSES","Set","StepEventStatus","getStartTime","startTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","match","options","useThrottledMemo","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","partitionsByName","buildMatrixData","lastRun","currRun","previousRunStatus","blankState","lastRunStepStatus","stepStats","stats","has","currRunStatus","partitionsWithARun","totalFailures","finalFailures","endsWith","round","showFailuresAndGapsOnly","ii","splice","every","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","client","useApolloClient","version","useRef","dataState","setDataState","_serializedRunTags","split","RepositoryLabelTag","partitionNamesSet","v","current","runTags","parse","stopIdx","nextCursorIdx","sliceNames","fetched","Promise","partitionSetTag","PartitionSet","partitionTag","fetchRunsForFilter","limit","timer","setInterval","clearInterval","recent","pending","statuses","STARTED","relevant","t","updated","some","o","assemblePartitions","byName","result","query","PARTITION_STEP_LOADER_QUERY","ScheduleStateChangeDialog","openWithIntent","schedules","count","dispatch","useInstigationStateReducer","type","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","start","schedule","scheduleName","scheduleSelector","stop","scheduleState","stopRunningSchedule","mutate","canQuicklyClose","canEscapeKeyClose","canOutsideClickClose","progressContent","completion","completed","ProgressBar","animate","NavigationBlock","completionContent","errors","errorCount","successCount","ul","li","strong","buttons","ScheduleBulkActionMenu","onDone","setOpenWithIntent","anyOff","anyOn","instigationStateSummary","aria-disabled","rightIcon","SchedulerInfo","healthy","daemonHealth","boxProps","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","Alert","href","makeScheduleKey","SensorStateChangeDialog","sensors","startSensor","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","sensor","sensorName","sensorSelector","sensorState","SensorBulkActionMenu","useDelayedState","ready","setReady","setTimeout","delayMsec","clearTimeout","SearchInputSpinner","tooltipContent","Tooltip","canShow","StickyTableContainer","$top","JobMenu","job","isAssetJob","materialize","useMaterializationAction","onReexecute","useJobReexecution","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","queryResult","RUN_RE_EXECUTION_QUERY","fetchIfPossible","useCallback","pipelineRunOrError","executeItem","e","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","launchpadElement","onOpened","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedJobRow","queryJob","SINGLE_JOB_QUERY","selector","buildPipelineSelector","pipelineOrError","latestRuns","Row","$start","RowGrid","border","RowCell","maxWidth","whiteSpace","CaptionText","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","LastRunSummary","showButton","showHover","showSummary","RunStatusPezList","fade","justifyContent","marginTop","VirtualizedJobHeader","HeaderRow","templateColumns","sticky","HeaderCell","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT"],"sourceRoot":""}