{"version":3,"file":"static/chunks/5326.083d05c4570d6c18.js","mappings":"uQAoBA,IAAMA,EAAiB,GACrBC,EAAEC,UAAU,CAACC,SAAS,CAACC,MAAM,CAAC,GAAO,CAACC,CAAAA,EAAAA,EAAAA,EAAAA,EAAsBC,EAAEC,IAAI,GAE9DC,EAA6B,KAEjC,GAAM,CAACC,SAAAA,CAAQ,CAAEC,QAAAA,CAAO,CAAEC,gBAAAA,CAAe,CAAC,CADjBC,CAAAA,EAAAA,EAAAA,UAAAA,EAAWC,EAAAA,EAAgBA,EAGpD,GAAIH,EACF,MACE,GAAAI,EAAAC,GAAA,EAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,eAAgB,QAAQ,EAAGC,MAAO,CAACC,WAAY,OAAO,WAClF,GAAAP,EAAAQ,IAAA,EAACN,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOK,WAAY,SAAUC,IAAK,EAAE,YACzD,GAAAV,EAAAC,GAAA,EAACU,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,YACjB,GAAAZ,EAAAC,GAAA,EAACY,MAAAA,CAAIP,MAAO,CAACQ,MAAOC,EAAAA,CAAgB,EAAE,WAAG,8BAQjD,GAAIlB,EAAgBmB,MAAM,EAAIrB,IAAAA,EAASqB,MAAM,CAC3C,MAAO,GAAAhB,EAAAC,GAAA,EAACgB,EAAAA,EAAQA,CAAAA,CAACC,GAAG,eAGtB,IAAMC,EAAuBxB,EAASL,MAAM,CAAC,GAAOJ,EAAeC,GAAG6B,MAAM,CAAG,GAG/E,GAAIG,IAAAA,EAAqBH,MAAM,CAAQ,CACrC,IAAMI,EAAqBzB,EAAS0B,IAAI,CAAC,GAAOlC,EAAEC,UAAU,CAACkC,WAAW,CAACN,MAAM,EAC/E,GAAII,EACF,MACE,GAAApB,EAAAC,GAAA,EAACgB,EAAAA,EAAQA,CAAAA,CACPC,GAAIK,CAAAA,EAAAA,EAAAA,EAAAA,EACFH,EAAmBhC,UAAU,CAACK,IAAI,CAClC2B,EAAmBI,kBAAkB,CAAC/B,IAAI,CAC1C,iBAAyEgC,MAAA,CAAxDL,EAAmBhC,UAAU,CAACkC,WAAW,CAAC,EAAE,CAAEI,SAAS,IAKlF,CAGA,GAAIP,IAAAA,EAAqBH,MAAM,CAAQ,CACrC,IAAMW,EAAOR,CAAoB,CAAC,EAAE,CAC9BS,EAAc1C,EAAeyC,GACnC,GAAIC,IAAAA,EAAYZ,MAAM,CAAQ,CAC5B,IAAMa,EAAMD,CAAW,CAAC,EAAE,CAC1B,MACE,GAAA5B,EAAAC,GAAA,EAACgB,EAAAA,EAAQA,CAAAA,CACPC,GAAIY,CAAAA,EAAAA,EAAAA,EAAAA,EAAsB,CACxBC,SAAUJ,EAAKvC,UAAU,CAACK,IAAI,CAC9BuC,aAAcL,EAAKH,kBAAkB,CAAC/B,IAAI,CAC1CwC,aAAcJ,EAAIpC,IAAI,CACtByC,MAAOL,EAAIK,KAAK,IAIxB,CACF,QAGA,EAAyBlB,MAAM,CAAG,EACzB,GAAAhB,EAAAC,GAAA,EAACgB,EAAAA,EAAQA,CAAAA,CAACC,GAAG,cAGf,GAAAlB,EAAAC,GAAA,EAACgB,EAAAA,EAAQA,CAAAA,CAACC,GAAG,cACtB,ECrFaiB,EDQsB,IAE/B,GAAAnC,EAAAC,GAAA,EAACmC,EAAAA,EAAMA,CAAAA,UACL,GAAApC,EAAAC,GAAA,EAACoC,EAAAA,CAAKA,CAAAA,CAACC,KAAK,IAAIC,eAAc,YAC5B,GAAAvC,EAAAC,GAAA,EAACP,EAAAA,CAAAA","sources":["webpack://_N_E/../ui-core/src/app/BaseFallthroughRoot.tsx","webpack://_N_E/../ui-core/src/app/FallthroughRoot.oss.tsx"],"sourcesContent":["import {Box, Colors, Spinner} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport {Redirect, Switch} from 'react-router-dom';\n\nimport {Route} from './Route';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {workspacePath, workspacePipelinePath} from '../workspace/workspacePath';\n\nexport const BaseFallthroughRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"*\" isNestingRoute>\n        <FinalRedirectOrLoadingRoot />\n      </Route>\n    </Switch>\n  );\n};\n\nconst getVisibleJobs = (r: DagsterRepoOption) =>\n  r.repository.pipelines.filter((j) => !isHiddenAssetGroupJob(j.name));\n\nconst FinalRedirectOrLoadingRoot = () => {\n  const workspaceContext = useContext(WorkspaceContext);\n  const {allRepos, loading, locationEntries} = workspaceContext;\n\n  if (loading) {\n    return (\n      <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n          <Spinner purpose=\"section\" />\n          <div style={{color: Colors.textLight()}}>Loading definitionsâ€¦</div>\n        </Box>\n      </Box>\n    );\n  }\n\n  // If we have location entries but no repos, we have no useful objects to show.\n  // Redirect to Workspace overview to surface relevant errors to the user.\n  if (locationEntries.length && allRepos.length === 0) {\n    return <Redirect to=\"/locations\" />;\n  }\n\n  const reposWithVisibleJobs = allRepos.filter((r) => getVisibleJobs(r).length > 0);\n\n  // If we have no repos with jobs, see if we have an asset group and route to it.\n  if (reposWithVisibleJobs.length === 0) {\n    const repoWithAssetGroup = allRepos.find((r) => r.repository.assetGroups.length);\n    if (repoWithAssetGroup) {\n      return (\n        <Redirect\n          to={workspacePath(\n            repoWithAssetGroup.repository.name,\n            repoWithAssetGroup.repositoryLocation.name,\n            `/asset-groups/${repoWithAssetGroup.repository.assetGroups[0]!.groupName}`,\n          )}\n        />\n      );\n    }\n  }\n\n  // If we have exactly one repo with one job, route to the job overview\n  if (reposWithVisibleJobs.length === 1) {\n    const repo = reposWithVisibleJobs[0]!;\n    const visibleJobs = getVisibleJobs(repo);\n    if (visibleJobs.length === 1) {\n      const job = visibleJobs[0]!;\n      return (\n        <Redirect\n          to={workspacePipelinePath({\n            repoName: repo.repository.name,\n            repoLocation: repo.repositoryLocation.name,\n            pipelineName: job.name,\n            isJob: job.isJob,\n          })}\n        />\n      );\n    }\n  }\n\n  // If we have more than one repo with a job, route to the instance overview\n  if (reposWithVisibleJobs.length > 0) {\n    return <Redirect to=\"/overview\" />;\n  }\n\n  return <Redirect to=\"/locations\" />;\n};\n","import {BaseFallthroughRoot} from './BaseFallthroughRoot';\n\nexport const FallthroughRoot = BaseFallthroughRoot;\n"],"names":["getVisibleJobs","r","repository","pipelines","filter","isHiddenAssetGroupJob","j","name","FinalRedirectOrLoadingRoot","allRepos","loading","locationEntries","useContext","WorkspaceContext","jsx_runtime","jsx","Box","flex","direction","justifyContent","style","paddingTop","jsxs","alignItems","gap","Spinner","purpose","div","color","Colors","length","Redirect","to","reposWithVisibleJobs","repoWithAssetGroup","find","assetGroups","workspacePath","repositoryLocation","concat","groupName","repo","visibleJobs","job","workspacePipelinePath","repoName","repoLocation","pipelineName","isJob","FallthroughRoot","Switch","Route","path","isNestingRoute"],"sourceRoot":""}