{"version":3,"file":"static/chunks/2608.aa2ee049c82fc24e.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageAlerts.oss.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageHeader.tsx","webpack://_N_E/../ui-core/src/overview/GroupTimelineRunsBySelect.tsx","webpack://_N_E/../ui-core/src/overview/groupRunsByAutomation.tsx","webpack://_N_E/../ui-core/src/overview/useGroupTimelineRunsBy.tsx","webpack://_N_E/../ui-core/src/runs/RunTimelineRowIcon.tsx","webpack://_N_E/../ui-core/src/runs/batchRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/runs/mergeStatusToBackground.tsx","webpack://_N_E/../ui-core/src/runs/RunTimeline.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/runs/HourlyDataCache/HourlyDataCache.tsx","webpack://_N_E/../ui-core/src/runs/getAutomationForRun.tsx","webpack://_N_E/../ui-core/src/runs/types/useRunsForTimeline.types.ts","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedules.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensors.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/GlobalAutomaterializationContent.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfillsRoot.tsx","webpack://_N_E/../ui-core/src/runs/useCursorAccumulatedQuery.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillLogsTab.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPartitionsTab.tsx","webpack://_N_E/../ui-core/src/instance/backfill/ExecutionTimeline.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillRunsTab.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/../ui-core/src/runs/RunListTabs.tsx"],"sourcesContent":["import {\n  Alert,\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, RefreshState, useRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsBaseData} from '../asset-data/AssetBaseDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {groupAssetsByStatus} from '../asset-graph/util';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {useAllAssets} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetCatalogTableQuery} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, HeaderRow, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const {assets, query, error, loading} = useAllAssets();\n  const refreshState = useRefreshAtInterval<any>({\n    refresh: query,\n    intervalMs: FIFTEEN_SECONDS,\n    leading: true,\n  });\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (assets) {\n      return groupAssets(assets);\n    }\n    return [];\n  }, [assets]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const orderedAssets = React.useMemo(\n    () => groupedAssets.flatMap((group) => group.assets.map((asset) => asset.key)) ?? [],\n    [groupedAssets],\n  );\n  useAssetsBaseData(orderedAssets, 'OverviewAssetsRoot');\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    if (loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (error) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={error} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n        <Box padding={{horizontal: 24, vertical: 16}} border=\"top\">\n          <Alert\n            intent=\"info\"\n            title=\"This Assets tab will be removed in an upcoming release.\"\n            description={\n              <>\n                Use the <Link to=\"/asset-groups\">global asset lineage page</Link> to view grouped\n                asset status details.\n              </>\n            }\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nconst VirtualHeaderRow = () => (\n  <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n    <HeaderCell>Group name</HeaderCell>\n    <HeaderCell>Missing</HeaderCell>\n    <HeaderCell>Failed/Overdue</HeaderCell>\n    <HeaderCell>In progress</HeaderCell>\n    <HeaderCell>Materialized</HeaderCell>\n  </HeaderRow>\n);\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsBaseData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    return groupAssetsByStatus(group.assets, liveDataByNode);\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.borderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.accentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.textDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.textLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.textLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","export const OverviewPageAlerts = () => null;\n","import {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {QueryResult} from '../apollo-client';\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, RefreshState} from '../app/QueryRefresh';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: RefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {flagSettingsPage} = useFeatureFlags();\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  const {enableAssetHealthOverviewPreview} = useContext(AssetFeatureContext);\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Timeline\" to=\"/overview/activity\" />\n        {enableAssetHealthOverviewPreview && (\n          <TabLink id=\"asset-health\" title=\"Asset health\" to=\"/overview/asset-health\" />\n        )}\n        {/* These are flagged individually because the links must be children of `Tabs`: */}\n        {flagSettingsPage ? null : <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />}\n        {flagSettingsPage ? null : (\n          <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        )}\n        {flagSettingsPage ? null : <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />}\n        {automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <div\n                    style={{\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                      backgroundColor:\n                        automaterialize.paused === false\n                          ? Colors.accentBlue()\n                          : Colors.accentGray(),\n                    }}\n                  />\n                )}\n              </Box>\n            }\n            to=\"/overview/automation\"\n          />\n        ) : null}\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box style={{alignSelf: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {Box, PageHeader} from '@dagster-io/ui-components';\nimport React from 'react';\nimport {OverviewPageAlerts} from 'shared/overview/OverviewPageAlerts.oss';\n\nimport {OverviewTabs} from './OverviewTabs';\n\nexport const OverviewPageHeader = ({\n  tab,\n  queryData,\n  refreshState,\n  ...rest\n}: React.ComponentProps<typeof OverviewTabs> &\n  Omit<React.ComponentProps<typeof PageHeader>, 'title'>) => {\n  return (\n    <PageHeader\n      tabs={\n        <Box flex={{direction: 'column', gap: 8}}>\n          <OverviewTabs tab={tab} queryData={queryData} refreshState={refreshState} />\n          <OverviewPageAlerts />\n        </Box>\n      }\n      {...rest}\n    />\n  );\n};\n","import {Button, Icon, IconName, MenuItem, Select} from '@dagster-io/ui-components';\n\nimport {GroupRunsBy} from './useGroupTimelineRunsBy';\nimport {assertUnreachable} from '../app/Util';\n\ninterface Props {\n  value: GroupRunsBy;\n  onSelect: (value: GroupRunsBy) => void;\n}\n\nexport const GroupTimelineRunsBySelect = ({value, onSelect}: Props) => {\n  return (\n    <Select<GroupRunsBy>\n      items={['automation', 'job']}\n      itemRenderer={(item, props) => (\n        <MenuItem\n          key={item}\n          icon={valueToIcon(item)}\n          text={valueToLabel(item)}\n          onClick={props.handleClick}\n        />\n      )}\n      onItemSelect={onSelect}\n      filterable={false}\n    >\n      <Button icon={<Icon name={valueToIcon(value)} />} rightIcon={<Icon name=\"arrow_drop_down\" />}>\n        {valueToLabel(value)}\n      </Button>\n    </Select>\n  );\n};\n\nconst valueToLabel = (value: GroupRunsBy) => {\n  switch (value) {\n    case 'automation':\n      return 'Automation';\n    case 'job':\n      return 'Job';\n    default:\n      return assertUnreachable(value);\n  }\n};\n\nconst valueToIcon = (value: GroupRunsBy): IconName => {\n  switch (value) {\n    case 'automation':\n      return 'sensors';\n    case 'job':\n      return 'job';\n    default:\n      return assertUnreachable(value);\n  }\n};\n","import {assertUnreachable} from '../app/Util';\nimport {RowObjectType, RunAutomation, TimelineRow} from '../runs/RunTimelineTypes';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nexport const groupRunsByAutomation = (jobRows: TimelineRow[]): TimelineRow[] => {\n  const byAutomation: Record<string, TimelineRow> = {};\n  for (const jobRow of jobRows) {\n    const {repoAddress, runs} = jobRow;\n    runs.forEach((run) => {\n      const {automation} = run;\n      const key = makeAutomationKey(repoAddress, automation);\n\n      if (!byAutomation[key]) {\n        const name = automationName(automation);\n        byAutomation[key] = {\n          key,\n          name,\n          type: automation?.type || 'manual',\n          path: makeAutomationPath(repoAddress, automation?.type, name),\n          repoAddress,\n          runs: [],\n        };\n      }\n\n      byAutomation[key]!.runs.push(run);\n    });\n  }\n\n  return Object.values(byAutomation);\n};\n\nconst automationName = (automation: RunAutomation | null) => {\n  if (!automation) {\n    return 'Launched manually';\n  }\n\n  const {type} = automation;\n  switch (type) {\n    case 'legacy-amp':\n      return 'Auto-materialized';\n    case 'schedule':\n    case 'sensor':\n      return automation.name;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nconst makeAutomationKey = (repoAddress: RepoAddress, automation: RunAutomation | null) => {\n  const repo = repoAddressAsHumanString(repoAddress);\n  if (!automation) {\n    return `MANUAL-${repo}`;\n  }\n\n  const {type} = automation;\n  switch (type) {\n    case 'legacy-amp':\n      return `AMP-${repo}`;\n    case 'schedule':\n    case 'sensor':\n      return `${automation.name}-${type}-${repo}`;\n    default:\n      return assertUnreachable(type);\n  }\n};\n\nconst makeAutomationPath = (repoAddress: RepoAddress, type?: RowObjectType, name?: string) => {\n  if (type === 'schedule') {\n    return workspacePathFromAddress(repoAddress, `/schedules/${name}`);\n  }\n  if (type === 'sensor') {\n    return workspacePathFromAddress(repoAddress, `/sensors/${name}`);\n  }\n  return '';\n};\n","import {useCallback, useMemo} from 'react';\n\nimport {useQueryAndLocalStoragePersistedState} from '../hooks/useQueryAndLocalStoragePersistedState';\n\nconst GROUP_BY_KEY = 'dagster.run-timeline-group-by';\n\nexport type GroupRunsBy = 'job' | 'automation';\n\nexport const useGroupTimelineRunsBy = (\n  defaultValue: GroupRunsBy = 'job',\n): [GroupRunsBy, (value: GroupRunsBy) => void] => {\n  const validate = useCallback(\n    (value: string) => {\n      switch (value) {\n        case 'job':\n        case 'automation':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [groupRunsBy, setGroupRunsBy] = useQueryAndLocalStoragePersistedState<GroupRunsBy>({\n    localStorageKey: GROUP_BY_KEY,\n    queryKey: 'groupBy',\n    encode: (value) => {\n      return {groupBy: value};\n    },\n    decode: (pair) => {\n      return validate(pair.groupBy);\n    },\n    isEmptyState: (value) => !value,\n  });\n\n  const setGroupByWithDefault = useCallback(\n    (value: GroupRunsBy) => {\n      setGroupRunsBy(value || defaultValue);\n    },\n    [defaultValue, setGroupRunsBy],\n  );\n\n  return useMemo(() => [groupRunsBy, setGroupByWithDefault], [groupRunsBy, setGroupByWithDefault]);\n};\n","import {Icon} from '@dagster-io/ui-components';\n\nimport {RowObjectType} from './RunTimelineTypes';\nimport {assertUnreachable} from '../app/Util';\n\nexport const RunTimelineRowIcon = ({type}: {type: RowObjectType}) => {\n  switch (type) {\n    case 'asset':\n      return <Icon name=\"asset\" />;\n    case 'job':\n      return <Icon name=\"job\" />;\n    case 'manual':\n      return <Icon name=\"account_circle\" />;\n    case 'schedule':\n      return <Icon name=\"schedule\" />;\n    case 'sensor':\n      return <Icon name=\"sensors\" />;\n    case 'legacy-amp':\n      return <Icon name=\"sensors\" />;\n    default:\n      return assertUnreachable(type);\n  }\n};\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n\n  // Give a pixel of breathing room for the \"now\" position.\n  const nowLeft = ((now - start) / (end - start)) * width + 1;\n\n  // Sort all runs by start time (via `left` value), ascending. Then iterate through\n  // them, batching them together.\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => a.left - b.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {Colors} from '@dagster-io/ui-components';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimelineTypes';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return Colors.backgroundDisabled();\n    case 'scheduled':\n      return Colors.backgroundDisabled();\n    case 'inProgress':\n      return Colors.accentBlue();\n    case 'failed':\n      return Colors.accentRed();\n    case 'succeeded':\n      return Colors.accentGreen();\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status as keyof typeof counts] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element!);\n  }\n\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {\n  Box,\n  Colors,\n  FontFamily,\n  Icon,\n  MiddleTruncate,\n  Mono,\n  Popover,\n  Spinner,\n  Tag,\n  Tooltip,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {RunTimelineRowIcon} from './RunTimelineRowIcon';\nimport {RowObjectType, TimelineRow, TimelineRun} from './RunTimelineTypes';\nimport {TimeElapsed} from './TimeElapsed';\nimport {RunBatch, batchRunsForTimeline} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useFormatDateTime} from '../ui/useFormatDateTime';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {SECTION_HEADER_HEIGHT} from '../workspace/TableSectionHeader';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport const CONSTANTS = {\n  ROW_HEIGHT,\n  DATE_TIME_HEIGHT,\n  TIME_HEADER_HEIGHT,\n  ONE_HOUR_MSEC,\n  EMPTY_STATE_HEIGHT,\n  LEFT_SIDE_SPACE_ALLOTTED,\n};\n\nconst SORT_PRIORITY: Record<RowObjectType, number> = {\n  asset: 0,\n  manual: 0,\n  'legacy-amp': 0,\n  schedule: 1,\n  sensor: 1,\n  job: 2,\n};\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; rowCount: number}\n  | {type: RowObjectType; repoAddress: RepoAddress; row: TimelineRow};\n\ninterface Props {\n  loading?: boolean;\n  rows: TimelineRow[];\n  rangeMs: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, rows, rangeMs} = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const {\n    viewport: {width},\n    containerProps: {ref: measureRef},\n  } = useViewport();\n\n  const now = Date.now();\n  const [_, end] = rangeMs;\n  const includesTicks = now <= end;\n\n  const buckets = React.useMemo(\n    () =>\n      rows.reduce(\n        (accum, row) => {\n          const {repoAddress} = row;\n          const repoKey = repoAddressAsURLString(repoAddress);\n          accum[repoKey] = accum[repoKey] || [];\n          accum[repoKey]!.push(row);\n          return accum;\n        },\n        {} as Record<string, TimelineRow[]>,\n      ),\n    [rows],\n  );\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.entries(buckets)\n      .sort((bucketA, bucketB) => COMMON_COLLATOR.compare(bucketA[0], bucketB[0]))\n      .forEach(([repoKey, bucket]) => {\n        const repoAddress = repoAddressFromPath(repoKey);\n        if (!repoAddress) {\n          return;\n        }\n\n        flat.push({type: 'header', repoAddress, rowCount: bucket.length});\n        if (expandedKeys.includes(repoKey)) {\n          bucket\n            .sort((a, b) => {\n              return (\n                SORT_PRIORITY[a.type] - SORT_PRIORITY[b.type] ||\n                COMMON_COLLATOR.compare(a.name, b.name)\n              );\n            })\n            .forEach((row) => {\n              flat.push({type: row.type, repoAddress, row});\n            });\n        }\n      });\n\n    return flat;\n  }, [buckets, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!width) {\n    return <div style={{height: DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT}} ref={measureRef} />;\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey]!.length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyObjects = repoOrder.length > 0;\n\n  return (\n    <>\n      <div ref={measureRef} />\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', flex: `0 0 ${DATE_TIME_HEIGHT}px`}}\n        border=\"top-and-bottom\"\n      >\n        Runs\n      </Box>\n      <div style={{position: 'relative'}}>\n        <TimeDividers interval={ONE_HOUR_MSEC} rangeMs={rangeMs} height={anyObjects ? height : 0} />\n      </div>\n      {repoOrder.length ? (\n        <div style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => {\n                const row: RowType = flattened[index]!;\n                const type = row!.type;\n                if (type === 'header') {\n                  const repoKey = repoAddressAsURLString(row.repoAddress);\n                  const repoName = row.repoAddress.name;\n                  return (\n                    <TimelineHeaderRow\n                      expanded={expandedKeys.includes(repoKey)}\n                      key={repoKey}\n                      height={size}\n                      top={start}\n                      repoAddress={row.repoAddress}\n                      isDuplicateRepoName={!!(repoName && duplicateRepoNames.has(repoName))}\n                      rows={buckets[repoKey]!}\n                      onToggle={onToggle}\n                      onToggleAll={onToggleAll}\n                    />\n                  );\n                }\n\n                return (\n                  <RunTimelineRow\n                    row={row.row}\n                    key={key}\n                    height={size}\n                    top={start}\n                    rangeMs={rangeMs}\n                    width={width}\n                  />\n                );\n              })}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </>\n  );\n};\n\ninterface TimelineHeaderRowProps {\n  expanded: boolean;\n  repoAddress: RepoAddress;\n  isDuplicateRepoName: boolean;\n  rows: TimelineRow[];\n  height: number;\n  top: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineHeaderRow = (props: TimelineHeaderRowProps) => {\n  const {expanded, onToggle, onToggleAll, repoAddress, isDuplicateRepoName, rows, height, top} =\n    props;\n\n  return (\n    <RepoRow\n      expanded={expanded}\n      height={height}\n      start={top}\n      repoAddress={repoAddress}\n      showLocation={isDuplicateRepoName}\n      onToggle={onToggle}\n      onToggleAll={onToggleAll}\n      rightElement={<RunStatusTags rows={rows} />} // todo dish: Fix this\n    />\n  );\n};\n\nconst RunStatusTags = React.memo(({rows}: {rows: TimelineRow[]}) => {\n  const counts = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    rows.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [rows]);\n\n  return <RunStatusTagsWithCounts {...counts} />;\n});\n\nexport const RunStatusTagsWithCounts = ({\n  inProgressCount,\n  succeededCount,\n  failedCount,\n}: {\n  inProgressCount: number;\n  succeededCount: number;\n  failedCount: number;\n}) => {\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n};\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  rangeMs: [number, number];\n  annotations?: {label: string; ms: number}[];\n  now?: number;\n}\n\nconst dateTimeOptions: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst dateTimeOptionsWithTimezone: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  timeZoneName: 'short',\n};\n\nconst timeOnlyOptionsWithMinute: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n  minute: 'numeric',\n};\n\nconst timeOnlyOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n};\n\nexport const TimeDividers = (props: TimeDividersProps) => {\n  const {interval, rangeMs, annotations, height, now: _now} = props;\n  const [start, end] = rangeMs;\n  const formatDateTime = useFormatDateTime();\n\n  // Create a cursor date at midnight in the user's timezone, to be used when\n  // generating date and time markers.\n  const boundaryCursor = useMemo(() => {\n    const startDate = new Date(start);\n    const startDateStringWithTimezone = formatDateTime(\n      startDate,\n      dateTimeOptionsWithTimezone,\n      'en-US',\n    );\n    return new Date(startDateStringWithTimezone);\n  }, [formatDateTime, start]);\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const dayBoundaries = [];\n\n    let cursor = boundaryCursor;\n\n    // Add date boundaries. This is not identical to time interval boundaries, due to\n    // daylight savings.\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.getTime();\n      const dayEnd = new Date(dayStart).setDate(cursor.getDate() + 1); // Increment by one day.\n      cursor = new Date(dayEnd);\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: formatDateTime(date, dateTimeOptions),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [boundaryCursor, end, formatDateTime, start]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const timeBoundaries = [];\n\n    let cursor = boundaryCursor;\n\n    // Add time boundaries at every interval.\n    while (cursor.valueOf() < end) {\n      const intervalStart = cursor.getTime();\n      const intervalEnd = new Date(intervalStart).setTime(cursor.getTime() + interval); // Increment by interval.\n      cursor = new Date(intervalEnd);\n      timeBoundaries.push(intervalStart);\n    }\n\n    // Create boundary markers, then slice off any markers that would be offscreen.\n    return timeBoundaries\n      .map((intervalStart) => {\n        const date = new Date(intervalStart);\n        const startLeftMsec = intervalStart - start;\n        const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n        const label =\n          interval < ONE_HOUR_MSEC\n            ? formatDateTime(date, timeOnlyOptionsWithMinute).replace(' ', '')\n            : formatDateTime(date, timeOnlyOptions).replace(' ', '');\n\n        return {\n          label,\n          key: date.toString(),\n          left,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, boundaryCursor, interval, formatDateTime]);\n\n  const now = _now || Date.now();\n  const msToLeft = (ms: number) => `${(((ms - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`, top: `-${DATE_TIME_HEIGHT}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: Colors.keylineDefault()}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <TimlineMarker style={{left: msToLeft(now)}}>Now</TimlineMarker>\n            <DividerLine\n              style={{left: msToLeft(now), backgroundColor: Colors.accentPrimary(), zIndex: 1}}\n            />\n          </>\n        ) : null}\n        {(annotations || [])\n          .filter((annotation) => annotation.ms >= start && annotation.ms <= end)\n          .map((annotation) => (\n            <React.Fragment key={annotation.label}>\n              <TimlineMarker style={{left: msToLeft(annotation.ms)}}>\n                {annotation.label}\n              </TimlineMarker>\n              <DividerLine\n                style={{\n                  left: msToLeft(annotation.ms),\n                  backgroundColor: Colors.accentPrimary(),\n                  zIndex: 1,\n                }}\n              />\n            </React.Fragment>\n          ))}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.textLighter()};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow:\n    inset 1px 0 0 ${Colors.keylineDefault()},\n    inset 0 1px 0 ${Colors.keylineDefault()},\n    inset -1px 0 0 ${Colors.keylineDefault()};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n\n  :first-child {\n    box-shadow:\n      inset 1px 0 0 ${Colors.keylineDefault()},\n      inset -1px 0 0 ${Colors.keylineDefault()};\n  }\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  white-space: nowrap;\n\n  :not(:first-child) {\n    box-shadow: inset 1px 0 0 ${Colors.keylineDefault()};\n  }\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${Colors.keylineDefault()};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow:\n    inset 1px 0 0 ${Colors.keylineDefault()},\n    inset -1px 0 0 ${Colors.keylineDefault()};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${Colors.keylineDefault()};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst TimlineMarker = styled.div`\n  background-color: ${Colors.accentPrimary()};\n  border-radius: 1px;\n  color: ${Colors.accentReversed()};\n  cursor: default;\n  font-size: 10px;\n  line-height: 12px;\n  transform: translate(-50%, 0);\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 4;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  row,\n  top,\n  height,\n  rangeMs,\n  width: containerWidth,\n}: {\n  row: TimelineRow;\n  top: number;\n  height: number;\n  rangeMs: [number, number];\n  width: number;\n}) => {\n  const [start, end] = rangeMs;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = row;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!row.runs.length) {\n    return null;\n  }\n\n  return (\n    <TimelineRowContainer $height={height} $start={top}>\n      <RowName>\n        <RunTimelineRowIcon type={row.type} />\n        <div style={{width: LABEL_WIDTH}}>\n          {row.path ? (\n            <Link to={row.path}>\n              <MiddleTruncate text={row.name} />\n            </Link>\n          ) : (\n            <span style={{color: Colors.textDefault()}}>\n              <MiddleTruncate text={row.name} />\n            </span>\n          )}\n        </div>\n      </RowName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0]!.id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent row={row} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </TimelineRowContainer>\n  );\n};\n\nconst RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.backgroundDefault()}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border=\"top-and-bottom\"\n    >\n      {content()}\n    </Box>\n  );\n};\n\ntype RowProps = {$height: number; $start: number};\n\nexport const TimelineRowContainer = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${Colors.keylineDefault()};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 1px 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n  transition: background-color 100ms linear;\n\n  :hover {\n    background-color: ${Colors.backgroundDefaultHover()};\n  }\n`;\n\nconst RowName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nexport const RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nexport const RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 1px;\n  height: ${ROW_HEIGHT - 8}px;\n  position: absolute;\n  top: 4px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition:\n    background 200ms linear,\n    opacity 200ms linear,\n    width 200ms ease-in-out;\n\n  :hover {\n    opacity: 0.7;\n  }\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${Colors.accentReversed()};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 12px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  row: TimelineRow;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {row, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border=\"bottom\" flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n        <RunTimelineRowIcon type={row.type} />\n        <HoverContentRowName>{row.name}</HoverContentRowName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? 'top' : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border=\"top\">\n          <Link to={`${row.path}/runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentRowName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","import {useCallback, useMemo} from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n  storageKey = HOUR_WINDOW_KEY,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(storageKey, validate);\n  const setHourWindowWithDefault = useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {cache} from 'idb-lru-cache';\n\ntype TimeWindow<T> = {start: number; end: number; data: T[]};\n\nexport const ONE_HOUR_S = 60 * 60;\n\ntype Subscription<T> = (data: T[]) => void;\n\nexport const defaultOptions = {\n  expiry: new Date('3030-01-01'), // never expire,\n};\n\ntype CacheType<T> = {\n  version: string | number;\n  cache: InstanceType<typeof HourlyDataCache<T>>['cache'];\n};\n\nexport class HourlyDataCache<T> {\n  private cache: Map<number, Array<TimeWindow<T>>> = new Map();\n  private subscriptions: Array<{hour: number; callback: Subscription<T>}> = [];\n  private indexedDBCache?: ReturnType<typeof cache<string, CacheType<T>>>;\n  private indexedDBKey: string;\n  private version: string | number;\n\n  /**\n   * @param id A unique ID for the hourly data cache in this deployment\n   * @param [keyPrefix=''] A unique key identifying the timeline view [incorporating filters, etc.]\n   */\n  constructor({\n    id,\n    keyPrefix = '',\n    keyMaxCount = 1,\n    version,\n  }: {\n    id?: string | false;\n    keyPrefix?: string;\n    keyMaxCount?: number;\n    version: string | number;\n  }) {\n    this.version = version;\n    this.indexedDBKey = keyPrefix ? `${keyPrefix}-hourlyData` : 'hourlyData';\n\n    if (id) {\n      this.indexedDBCache = cache<string, CacheType<T>>({\n        dbName: `HourlyDataCache:${id}`,\n        maxCount: keyMaxCount,\n      });\n      this.loadCacheFromIndexedDB();\n      this.clearOldEntries();\n    }\n  }\n\n  loadPromise: Promise<void> | undefined;\n\n  public async loadCacheFromIndexedDB() {\n    if (!this.indexedDBCache) {\n      return;\n    }\n    if (this.loadPromise) {\n      return await this.loadPromise;\n    }\n    this.loadPromise = new Promise(async (res) => {\n      if (!this.indexedDBCache) {\n        return;\n      }\n      if (!(await this.indexedDBCache.has(this.indexedDBKey))) {\n        res();\n        return;\n      }\n      const cachedData = await this.indexedDBCache.get(this.indexedDBKey);\n      if (cachedData && cachedData.value.version === this.version) {\n        this.cache = new Map(cachedData.value.cache);\n      }\n      res();\n    });\n    return await this.loadPromise;\n  }\n\n  private saveTimeout?: ReturnType<typeof setTimeout>;\n  private registeredUnload: boolean = false;\n  private async saveCacheToIndexedDB() {\n    if (typeof jest !== 'undefined') {\n      if (!this.indexedDBCache) {\n        return;\n      }\n      this.indexedDBCache.set(\n        this.indexedDBKey,\n        {version: this.version, cache: this.cache},\n        defaultOptions,\n      );\n      return;\n    }\n    clearTimeout(this.saveTimeout);\n    this.saveTimeout = setTimeout(() => {\n      if (!this.indexedDBCache) {\n        return;\n      }\n      this.indexedDBCache.set(\n        this.indexedDBKey,\n        {version: this.version, cache: this.cache},\n        defaultOptions,\n      );\n    }, 10000);\n    if (!this.registeredUnload) {\n      this.registeredUnload = true;\n      window.addEventListener('beforeunload', () => {\n        if (!this.indexedDBCache) {\n          return;\n        }\n        this.indexedDBCache.set(\n          this.indexedDBKey,\n          {version: this.version, cache: this.cache},\n          defaultOptions,\n        );\n      });\n    }\n  }\n\n  public async clearOldEntries() {\n    const oneWeekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;\n    const hour = Math.floor(oneWeekAgo / (ONE_HOUR_S * 1000));\n\n    await this.loadCacheFromIndexedDB();\n    for (const ts of this.cache.keys()) {\n      if (ts < hour) {\n        this.cache.delete(ts);\n      }\n    }\n  }\n\n  /**\n   * Adds data to the cache for the specified time range.\n   * @param start - The start time in seconds.\n   * @param end - The end time in seconds.\n   * @param data - The data to cache.\n   */\n  addData(start: number, end: number, data: T[]): void {\n    const startHour = Math.floor(start / ONE_HOUR_S);\n    const endHour = Math.floor(end / ONE_HOUR_S);\n\n    if (endHour - startHour > 1) {\n      throw new Error('Expected all data to fit within an hour');\n    }\n\n    this.addPartialData(startHour, start, end, data);\n    this.notifySubscribers(startHour);\n    this.saveCacheToIndexedDB();\n  }\n\n  /**\n   * Adds data to the partial cache for a specific hour.\n   * @param hour - The hour for which to add data.\n   * @param start - The start time in seconds.\n   * @param end - The end time in seconds.\n   * @param data - The data to cache.\n   */\n  private addPartialData(hour: number, start: number, end: number, data: T[]): void {\n    if (!this.cache.has(hour)) {\n      this.cache.set(hour, []);\n    }\n    this.cache.get(hour)!.push({start, end, data});\n    this.cache.set(hour, this.mergeIntervals(this.cache.get(hour)!));\n  }\n\n  /**\n   * Retrieves the data for a specific hour.\n   * @param s - The time in seconds.\n   * @returns The data for the specified hour.\n   */\n  getHourData(s: number): T[] {\n    const hour = Math.floor(s / ONE_HOUR_S);\n    if (this.cache.has(hour)) {\n      return this.cache.get(hour)!.flatMap((interval) => interval.data);\n    }\n    return [];\n  }\n\n  /**\n   * Returns the missing ranges for a specific hour.\n   * @param s - The time in seconds.\n   * @returns An array of missing ranges for the specified hour.\n   */\n  getMissingIntervals(s: number): Array<[number, number]> {\n    const hour = Math.floor(s / ONE_HOUR_S);\n    if (\n      this.cache.has(hour) &&\n      this.cache.get(hour)!.length === 1 &&\n      this.cache.get(hour)![0]!.end - this.cache.get(hour)![0]!.start === ONE_HOUR_S\n    ) {\n      return [];\n    }\n\n    const missingIntervals: Array<[number, number]> = [];\n    const hourStart = hour * ONE_HOUR_S;\n    const hourEnd = (hour + 1) * ONE_HOUR_S;\n    let currentStart = hourStart;\n\n    if (this.cache.has(hour)) {\n      for (const {start: cachedStart, end: cachedEnd} of this.cache.get(hour)!) {\n        if (cachedStart > currentStart) {\n          missingIntervals.push([currentStart, cachedStart]);\n        }\n        currentStart = Math.max(currentStart, cachedEnd);\n      }\n    }\n\n    if (currentStart < hourEnd) {\n      missingIntervals.push([currentStart, hourEnd]);\n    }\n\n    return missingIntervals;\n  }\n\n  /**\n   * Checks if a range is completely cached.\n   * @param start - The start time in seconds.\n   * @param end - The end time in seconds.\n   * @returns True if the range is completely cached, false otherwise.\n   */\n  isCompleteRange(start: number, end: number): boolean {\n    const startHour = Math.floor(start / ONE_HOUR_S);\n    const endHour = Math.floor(end / ONE_HOUR_S);\n\n    if (endHour - startHour > 1) {\n      throw new Error('Expected the input range to be within a single hour');\n    }\n\n    if (this.cache.has(startHour)) {\n      const intervals = this.cache.get(startHour)!;\n      let currentStart = start;\n\n      for (const {start: cachedStart, end: cachedEnd} of intervals) {\n        if (cachedStart > currentStart) {\n          return false;\n        }\n        if (cachedEnd >= end) {\n          return true;\n        }\n        currentStart = Math.max(currentStart, cachedEnd);\n      }\n\n      return currentStart >= end;\n    }\n\n    return false;\n  }\n\n  /**\n   * Merges overlapping intervals.\n   * @param intervals - The intervals to merge.\n   * @returns An array of merged intervals.\n   */\n  private mergeIntervals(intervals: Array<TimeWindow<T>>): Array<TimeWindow<T>> {\n    if (intervals.length === 0) {\n      return [];\n    }\n\n    intervals.sort((a, b) => a.start - b.start);\n    const mergedIntervals: Array<TimeWindow<T>> = [intervals[0]!];\n\n    for (const current of intervals.slice(1)) {\n      const lastMerged = mergedIntervals[mergedIntervals.length - 1]!;\n\n      if (current.start <= lastMerged.end) {\n        lastMerged.end = Math.max(lastMerged.end, current.end);\n        lastMerged.data = lastMerged.data.concat(current.data);\n      } else {\n        mergedIntervals.push(current);\n      }\n    }\n\n    return mergedIntervals;\n  }\n\n  /**\n   * Subscribes to data added to a specific hourly bucket and subsequent hours.\n   * @param startHour - The hour bucket to subscribe to.\n   * @param callback - The callback function to notify when new data is added.\n   */\n  subscribe(ts: number, callback: Subscription<T>) {\n    const startHour = Math.floor(ts / ONE_HOUR_S);\n    const sub = {hour: startHour, callback};\n    this.subscriptions.push(sub);\n    this.notifyExistingData(startHour, callback);\n\n    return () => {\n      this.subscriptions = this.subscriptions.filter((subB) => subB !== sub);\n    };\n  }\n\n  /**\n   * Notifies subscribers of new data added to a specific hour and subsequent hours.\n   * @param hour - The hour bucket to notify subscribers of.\n   * @param data - The new data added.\n   */\n  private notifySubscribers(hour: number): void {\n    for (const {hour: subHour, callback} of this.subscriptions) {\n      if (hour >= subHour) {\n        const combinedData = this.getCombinedData(subHour);\n        callback(combinedData);\n      }\n    }\n  }\n\n  /**\n   * Notifies a new subscriber of all existing data for the subscribed hour and subsequent hours.\n   * @param startHour - The starting hour for the subscription.\n   * @param callback - The callback function to notify with existing data.\n   */\n  private notifyExistingData(startHour: number, callback: Subscription<T>): void {\n    const combinedData = this.getCombinedData(startHour);\n    if (combinedData.length > 0) {\n      callback(combinedData);\n    }\n  }\n\n  /**\n   * Combines data from the given hour and subsequent hours.\n   * @param startHour - The starting hour.\n   * @returns Combined data.\n   */\n  private getCombinedData(startHour: number): T[] {\n    let combinedData: T[] = [];\n    for (const [hour, intervals] of this.cache) {\n      if (hour >= startHour) {\n        combinedData = combinedData.concat(intervals.flatMap((interval) => interval.data));\n      }\n    }\n    return combinedData;\n  }\n}\n\n/**\n * Breaks a time range into hourly buckets.\n * @param startTime - The start time in seconds.\n * @param endTime - The end time in seconds.\n * @returns An array of [start, end] pairs representing each hourly bucket.\n */\nexport function getHourlyBuckets(startTime: number, endTime: number): [number, number][] {\n  const buckets: [number, number][] = [];\n\n  // Convert start and end times to the number of hours since epoch\n  const startHour = Math.floor(startTime / ONE_HOUR_S) * ONE_HOUR_S;\n\n  // Handle the first partial bucket\n  if (startTime !== startHour) {\n    const firstBucketEnd = startHour + ONE_HOUR_S;\n    buckets.push([startTime, Math.min(firstBucketEnd, endTime)]);\n  }\n\n  // Add full hourly buckets\n  let currentStart = startHour + (startTime === startHour ? 0 : ONE_HOUR_S);\n  while (currentStart + ONE_HOUR_S <= endTime) {\n    const nextHour = currentStart + ONE_HOUR_S;\n    buckets.push([currentStart, nextHour]);\n    currentStart = nextHour;\n  }\n\n  // Handle the last partial bucket\n  if (currentStart < endTime) {\n    buckets.push([currentStart, endTime]);\n  }\n\n  return buckets;\n}\n","import {DagsterTag} from './RunTag';\nimport {RunAutomation} from './RunTimelineTypes';\nimport {RunTimelineFragment} from './types/useRunsForTimeline.types';\nimport {RepoAddress} from '../workspace/types';\n\nexport const getAutomationForRun = (\n  repoAddress: RepoAddress,\n  run: RunTimelineFragment,\n): RunAutomation | null => {\n  const {tags = []} = run;\n  for (const tag of tags) {\n    if (tag.key === DagsterTag.ScheduleName) {\n      return {type: 'schedule', repoAddress, name: tag.value};\n    }\n    if (tag.key === DagsterTag.SensorName) {\n      return {type: 'sensor', repoAddress, name: tag.value};\n    }\n    if (tag.key === DagsterTag.Automaterialize) {\n      return {type: 'legacy-amp'};\n    }\n  }\n  return null;\n};\n","// Generated GraphQL types, do not edit manually.\n\nimport * as Types from '../../graphql/types';\n\nexport type RunTimelineFragment = {\n  __typename: 'Run';\n  id: string;\n  pipelineName: string;\n  status: Types.RunStatus;\n  creationTime: number;\n  startTime: number | null;\n  endTime: number | null;\n  updateTime: number | null;\n  tags: Array<{__typename: 'PipelineTag'; key: string; value: string}>;\n  repositoryOrigin: {\n    __typename: 'RepositoryOrigin';\n    id: string;\n    repositoryName: string;\n    repositoryLocationName: string;\n  } | null;\n};\n\nexport type OngoingRunTimelineQueryVariables = Types.Exact<{\n  inProgressFilter: Types.RunsFilter;\n  limit: Types.Scalars['Int']['input'];\n  cursor?: Types.InputMaybe<Types.Scalars['String']['input']>;\n}>;\n\nexport type OngoingRunTimelineQuery = {\n  __typename: 'Query';\n  ongoing:\n    | {__typename: 'InvalidPipelineRunsFilterError'}\n    | {__typename: 'PythonError'}\n    | {\n        __typename: 'Runs';\n        results: Array<{\n          __typename: 'Run';\n          id: string;\n          pipelineName: string;\n          status: Types.RunStatus;\n          creationTime: number;\n          startTime: number | null;\n          endTime: number | null;\n          updateTime: number | null;\n          tags: Array<{__typename: 'PipelineTag'; key: string; value: string}>;\n          repositoryOrigin: {\n            __typename: 'RepositoryOrigin';\n            id: string;\n            repositoryName: string;\n            repositoryLocationName: string;\n          } | null;\n        }>;\n      };\n};\n\nexport type CompletedRunTimelineQueryVariables = Types.Exact<{\n  completedFilter: Types.RunsFilter;\n  limit: Types.Scalars['Int']['input'];\n  cursor?: Types.InputMaybe<Types.Scalars['String']['input']>;\n}>;\n\nexport type CompletedRunTimelineQuery = {\n  __typename: 'Query';\n  completed:\n    | {__typename: 'InvalidPipelineRunsFilterError'}\n    | {__typename: 'PythonError'}\n    | {\n        __typename: 'Runs';\n        results: Array<{\n          __typename: 'Run';\n          id: string;\n          pipelineName: string;\n          status: Types.RunStatus;\n          creationTime: number;\n          startTime: number | null;\n          endTime: number | null;\n          updateTime: number | null;\n          tags: Array<{__typename: 'PipelineTag'; key: string; value: string}>;\n          repositoryOrigin: {\n            __typename: 'RepositoryOrigin';\n            id: string;\n            repositoryName: string;\n            repositoryLocationName: string;\n          } | null;\n        }>;\n      };\n};\n\nexport type FutureTicksQueryVariables = Types.Exact<{\n  tickCursor?: Types.InputMaybe<Types.Scalars['Float']['input']>;\n  ticksUntil?: Types.InputMaybe<Types.Scalars['Float']['input']>;\n}>;\n\nexport type FutureTicksQuery = {\n  __typename: 'Query';\n  workspaceOrError:\n    | {__typename: 'PythonError'}\n    | {\n        __typename: 'Workspace';\n        id: string;\n        locationEntries: Array<{\n          __typename: 'WorkspaceLocationEntry';\n          id: string;\n          name: string;\n          locationOrLoadError:\n            | {__typename: 'PythonError'}\n            | {\n                __typename: 'RepositoryLocation';\n                id: string;\n                name: string;\n                repositories: Array<{\n                  __typename: 'Repository';\n                  id: string;\n                  name: string;\n                  pipelines: Array<{\n                    __typename: 'Pipeline';\n                    id: string;\n                    name: string;\n                    isJob: boolean;\n                  }>;\n                  schedules: Array<{\n                    __typename: 'Schedule';\n                    id: string;\n                    name: string;\n                    pipelineName: string;\n                    executionTimezone: string | null;\n                    scheduleState: {\n                      __typename: 'InstigationState';\n                      id: string;\n                      status: Types.InstigationStatus;\n                    };\n                    futureTicks: {\n                      __typename: 'DryRunInstigationTicks';\n                      results: Array<{\n                        __typename: 'DryRunInstigationTick';\n                        timestamp: number | null;\n                      }>;\n                    };\n                  }>;\n                }>;\n              }\n            | null;\n        }>;\n      };\n};\n\nexport const OngoingRunTimelineQueryVersion = '055420e85ba799b294bab52c01d3f4a4470580606a40483031c35777d88d527f';\n\nexport const CompletedRunTimelineQueryVersion = 'a551b5ebeb919ea7ea4ca74385d3711d6a7e4f0e4042c04ab43bf9b939f4975c';\n\nexport const FutureTicksQueryVersion = '9b947053273ecaa20ef19df02f0aa8e6f33b8a1628175987670e3c73a350e640';\n","import {gql} from '../apollo-client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {useCallback, useContext, useLayoutEffect, useMemo, useRef, useState} from 'react';\n\nimport {HourlyDataCache, getHourlyBuckets} from './HourlyDataCache/HourlyDataCache';\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineRow, TimelineRun} from './RunTimelineTypes';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {fetchPaginatedBucketData, fetchPaginatedData} from './fetchPaginatedBucketData';\nimport {getAutomationForRun} from './getAutomationForRun';\nimport {\n  CompletedRunTimelineQuery,\n  CompletedRunTimelineQueryVariables,\n  CompletedRunTimelineQueryVersion,\n  FutureTicksQuery,\n  FutureTicksQueryVariables,\n  OngoingRunTimelineQuery,\n  OngoingRunTimelineQueryVariables,\n  RunTimelineFragment,\n} from './types/useRunsForTimeline.types';\nimport {QueryResult, gql, useApolloClient} from '../apollo-client';\nimport {AppContext} from '../app/AppContext';\nimport {FIFTEEN_SECONDS, useRefreshAtInterval} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {InstigationStatus, RunStatus, RunsFilter} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {useBlockTraceUntilTrue} from '../performance/TraceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nconst BATCH_LIMIT = 500;\n\nexport const useRunsForTimeline = ({\n  rangeMs,\n  filter,\n  batchLimit = BATCH_LIMIT,\n  refreshInterval = 2 * FIFTEEN_SECONDS,\n  showTicks = true,\n}: {\n  rangeMs: readonly [number, number];\n  filter?: RunsFilter;\n  refreshInterval?: number;\n  batchLimit?: number;\n  showTicks?: boolean;\n}) => {\n  const runsFilter = useMemo(() => {\n    return filter ?? {};\n  }, [filter]);\n  const [start, _end] = rangeMs;\n  const end = useMemo(() => {\n    return Math.min(Date.now(), _end);\n  }, [_end]);\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const buckets = useMemo(() => getHourlyBuckets(startSec, endSec), [startSec, endSec]);\n\n  const client = useApolloClient();\n\n  const {localCacheIdPrefix} = useContext(AppContext);\n  const completedRunsCache = useMemo(() => {\n    if (filter) {\n      return new HourlyDataCache<RunTimelineFragment>({\n        id: localCacheIdPrefix ? `${localCacheIdPrefix}-useRunsForTimeline-filtered` : false,\n        keyPrefix: JSON.stringify(filter),\n        keyMaxCount: 3,\n        version: CompletedRunTimelineQueryVersion,\n      });\n    }\n    return new HourlyDataCache<RunTimelineFragment>({\n      id: localCacheIdPrefix ? `${localCacheIdPrefix}-useRunsForTimeline` : false,\n      version: CompletedRunTimelineQueryVersion,\n    });\n  }, [filter, localCacheIdPrefix]);\n  const [completedRuns, setCompletedRuns] = useState<RunTimelineFragment[]>([]);\n\n  useLayoutEffect(() => {\n    // Fetch runs matching:\n    // 1. updatedAfter (startSec) -> updatedBefore (endSec)\n    // 2. updatedAfter (endSec) -> createdBefore (endSec).\n    // For (2) we rely on the fact that runs are fetched in adjacent intervals from \"now\" going backwards\n    // so we can assume a future bucket that is being or was fetched will have the runs we need.\n    return completedRunsCache.subscribe(startSec, (runs) => {\n      setCompletedRuns(\n        runs.filter(\n          (run) =>\n            (run.startTime! <= endSec && run.updateTime! >= endSec) ||\n            (run.updateTime! >= startSec && run.updateTime! <= endSec),\n        ),\n      );\n    });\n  }, [completedRunsCache, end, endSec, startSec]);\n\n  const [completedRunsQueryData, setCompletedRunsData] = useState<{\n    // TODO: Remove data property here since we grab the data from the cache instead of here.\n    data: RunTimelineFragment[] | undefined;\n    loading: boolean;\n    error: any;\n    called: boolean;\n  }>({\n    data: undefined,\n    loading: true,\n    error: undefined,\n    called: false,\n  });\n  const [ongoingRunsQueryData, setOngoingRunsData] = useState<{\n    data: RunTimelineFragment[] | undefined;\n    loading: boolean;\n    error: any;\n    called: boolean;\n  }>({\n    data: undefined,\n    loading: true,\n    error: undefined,\n    called: false,\n  });\n\n  const {data: ongoingRunsData} = ongoingRunsQueryData;\n\n  const [didLoadCache, setDidLoadCache] = useState(false);\n  useBlockTraceUntilTrue('IndexedDBCache', didLoadCache);\n\n  const fetchCompletedRunsQueryData = useCallback(async () => {\n    await completedRunsCache.loadCacheFromIndexedDB();\n    setDidLoadCache(true);\n\n    // Accumulate the data to commit to the cache.\n    // Intentionally don't commit until everything is done in order to avoid\n    // committing incomplete data (and then assuming its full data later) in case the tab is closed early.\n    const dataToCommitToCacheByBucket: WeakMap<\n      [number, number],\n      Array<{\n        updatedBefore: number;\n        updatedAfter: number;\n        runs: RunTimelineFragment[];\n      }>\n    > = new WeakMap();\n\n    return await fetchPaginatedBucketData({\n      buckets: buckets\n        .filter((bucket) => !completedRunsCache.isCompleteRange(bucket[0], bucket[1]))\n        .map((bucket) => {\n          let updatedAfter = bucket[0];\n          let updatedBefore = bucket[1];\n          const missingRange = completedRunsCache.getMissingIntervals(updatedAfter);\n          if (missingRange[0]) {\n            // When paginating backwards the missing range will be at the beginning of the hour\n            // When looking the current time the missing range will be at the end of the hour\n            updatedAfter = Math.max(missingRange[0][0], updatedAfter);\n            updatedBefore = Math.min(missingRange[0][1], updatedBefore);\n          }\n          return [updatedAfter, updatedBefore] as [number, number];\n        }),\n      setQueryData: setCompletedRunsData,\n      async fetchData(bucket, cursor: string | undefined) {\n        const updatedBefore = bucket[1];\n        const updatedAfter = bucket[0];\n\n        if (completedRunsCache.isCompleteRange(updatedAfter, updatedBefore) && !cursor) {\n          // If there's a cursor then that means the current range is being paginated so\n          // it is not complete even though there is some data for the time range\n\n          return {\n            // TODO: Remove data property here\n            data: [],\n            cursor: undefined,\n            hasMore: false,\n            error: undefined,\n          };\n        }\n\n        const {data} = await client.query<\n          CompletedRunTimelineQuery,\n          CompletedRunTimelineQueryVariables\n        >({\n          query: COMPLETED_RUN_TIMELINE_QUERY,\n          notifyOnNetworkStatusChange: true,\n          fetchPolicy: 'no-cache',\n          variables: {\n            completedFilter: {\n              ...runsFilter,\n              statuses: Array.from(doneStatuses),\n              updatedBefore,\n              updatedAfter,\n            },\n            cursor,\n            limit: batchLimit,\n          },\n        });\n\n        if (data.completed.__typename !== 'Runs') {\n          return {\n            data: [],\n            cursor: undefined,\n            hasMore: false,\n            error: data.completed,\n          };\n        }\n        const runs: RunTimelineFragment[] = data.completed.results;\n\n        const hasMoreData = runs.length === batchLimit;\n        const nextCursor = hasMoreData ? runs[runs.length - 1]!.id : undefined;\n\n        const accumulatedData = dataToCommitToCacheByBucket.get(bucket) ?? [];\n        dataToCommitToCacheByBucket.set(bucket, accumulatedData);\n\n        if (hasMoreData) {\n          // If there are runs lets accumulate this data to commit to the cache later\n          // once all of the runs for this bucket have been fetched.\n          accumulatedData.push({updatedAfter, updatedBefore, runs});\n        } else {\n          // If there is no more data lets commit all of the accumulated data to the cache\n          completedRunsCache.addData(updatedAfter, updatedBefore, runs);\n          accumulatedData.forEach(({updatedAfter, updatedBefore, runs}) => {\n            completedRunsCache.addData(updatedAfter, updatedBefore, runs);\n          });\n        }\n\n        return {\n          data: [],\n          cursor: nextCursor,\n          hasMore: hasMoreData,\n          error: undefined,\n        };\n      },\n    });\n  }, [batchLimit, buckets, client, completedRunsCache, runsFilter]);\n\n  // If the user paginates backwards quickly then there will be multiple outstanding fetches\n  // but we only want the most recent fetch to change loading back to false.\n  // fetchIdRef will help us tell if this fetch is the most recent fetch.\n  const fetchIdRef = useRef(0);\n  const ongoingRunFetchIdRef = useRef(0);\n  const futureTicksFetchIdRef = useRef(0);\n  const fetchOngoingRunsQueryData = useCallback(async () => {\n    const id = ++ongoingRunFetchIdRef.current;\n    setOngoingRunsData(({data}) => ({\n      data, // preserve existing data\n      loading: true,\n      called: true,\n      error: undefined,\n    }));\n    try {\n      const data = await fetchPaginatedData({\n        async fetchData(cursor: string | undefined) {\n          const {data} = await client.query<\n            OngoingRunTimelineQuery,\n            OngoingRunTimelineQueryVariables\n          >({\n            query: ONGOING_RUN_TIMELINE_QUERY,\n            notifyOnNetworkStatusChange: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n              inProgressFilter: {\n                ...runsFilter,\n                statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n              },\n              cursor,\n              limit: batchLimit,\n            },\n          });\n\n          if (data.ongoing.__typename !== 'Runs') {\n            return {\n              data: [],\n              cursor: undefined,\n              hasMore: false,\n              error: data.ongoing,\n            };\n          }\n          const runs = data.ongoing.results;\n          const hasMoreData = runs.length === batchLimit;\n          const nextCursor = hasMoreData ? runs[runs.length - 1]!.id : undefined;\n          return {\n            data: runs,\n            cursor: nextCursor,\n            hasMore: hasMoreData,\n            error: undefined,\n          };\n        },\n      });\n      if (ongoingRunFetchIdRef.current === id) {\n        setOngoingRunsData({\n          data,\n          loading: false,\n          called: true,\n          error: undefined,\n        });\n      }\n    } catch (e) {\n      if (ongoingRunFetchIdRef.current === id) {\n        setOngoingRunsData(({data}) => ({\n          data, // preserve existing data\n          loading: false,\n          called: true,\n          error: e,\n        }));\n      }\n    }\n  }, [client, runsFilter, batchLimit]);\n\n  const [futureTicksQueryData, setFutureTicksQueryData] = useState<\n    Pick<QueryResult<FutureTicksQuery>, 'data' | 'error' | 'called' | 'loading'>\n  >({data: undefined, called: true, loading: true, error: undefined});\n\n  const fetchFutureTicks = useCallback(async () => {\n    const id = ++futureTicksFetchIdRef.current;\n    const queryData = await client.query<FutureTicksQuery, FutureTicksQueryVariables>({\n      query: FUTURE_TICKS_QUERY,\n      variables: showTicks\n        ? {tickCursor: startSec, ticksUntil: _end / 1000.0}\n        : {tickCursor: startSec, ticksUntil: startSec},\n      fetchPolicy: 'no-cache',\n    });\n    if (id === futureTicksFetchIdRef.current) {\n      setFutureTicksQueryData({...queryData, called: true});\n    }\n  }, [startSec, _end, client, showTicks]);\n\n  useBlockTraceUntilTrue('CompletedRunTimelineQuery', !completedRunsQueryData.loading);\n\n  const {data: futureTicksData} = futureTicksQueryData;\n\n  const {workspaceOrError} = futureTicksData || {workspaceOrError: undefined};\n\n  const [loading, setLoading] = useState(true);\n\n  const previousRunsByJobKey = useRef<{\n    jobInfo: Record<string, {repoAddress: RepoAddress; pipelineName: string; isAdHoc: boolean}>;\n    runsByJobKey: {\n      [jobKey: string]: {\n        [id: string]: TimelineRun;\n      };\n    };\n  }>({jobInfo: {}, runsByJobKey: {}});\n  const {runsByJobKey, jobInfo} = useMemo(() => {\n    if (loading) {\n      // While we're loading data just keep returning the last result so that we're not\n      // re-rendering 24+ times while we populate the cache asynchronously via our batching/chunking.\n      return previousRunsByJobKey.current;\n    }\n    const jobInfo: Record<\n      string,\n      {repoAddress: RepoAddress; pipelineName: string; isAdHoc: boolean}\n    > = {};\n    const map: {\n      [jobKey: string]: {\n        [id: string]: TimelineRun;\n      };\n    } = {};\n    const now = Date.now();\n\n    function saveRunInfo(run: (typeof completedRuns)[0]) {\n      if (run.startTime === null) {\n        return;\n      }\n\n      // If the run has ended prior to the start of the range, discard it. This can occur\n      // because we are using \"updated\" time for filtering our runs, which is a value\n      // independent of start/end timestamps.\n      if (run.endTime && run.endTime * 1000 < start) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      const repoAddress = buildRepoAddress(\n        run.repositoryOrigin.repositoryName,\n        run.repositoryOrigin.repositoryLocationName,\n      );\n\n      const runJobKey = makeJobKey(repoAddress, run.pipelineName);\n\n      map[runJobKey] = map[runJobKey] || {};\n      map[runJobKey]![run.id] = {\n        id: run.id,\n        status: run.status,\n        startTime: run.startTime * 1000,\n        endTime: run.endTime ? run.endTime * 1000 : now,\n        automation: getAutomationForRun(repoAddress, run),\n      };\n\n      if (!jobInfo[runJobKey]) {\n        const pipelineName = run.pipelineName;\n        const isAdHoc = isHiddenAssetGroupJob(pipelineName);\n\n        jobInfo[runJobKey] = {\n          repoAddress,\n          isAdHoc,\n          pipelineName,\n        };\n      }\n    }\n\n    // fetch all the runs in the given range\n    completedRuns.forEach(saveRunInfo);\n    ongoingRunsData?.forEach(saveRunInfo);\n    const current = {jobInfo, runsByJobKey: map};\n    previousRunsByJobKey.current = current;\n    return current;\n  }, [loading, ongoingRunsData, completedRuns, start]);\n\n  const jobsWithCompletedRunsAndOngoingRuns = useMemo(() => {\n    const jobs: Record<string, TimelineRow> = {};\n    if (!Object.keys(runsByJobKey).length) {\n      return jobs;\n    }\n\n    Object.entries(runsByJobKey).forEach(([jobKey, jobRunsInfo]) => {\n      const runs = Object.values(jobRunsInfo);\n      const info = jobInfo[jobKey];\n      if (!info) {\n        return;\n      }\n\n      const {pipelineName, isAdHoc, repoAddress} = info;\n\n      jobs[jobKey] = {\n        key: jobKey,\n        name: isAdHoc ? 'Ad hoc materializations' : pipelineName,\n        type: isAdHoc ? 'asset' : 'job',\n        repoAddress,\n        path: isAdHoc\n          ? null\n          : workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName,\n              isJob: true,\n            }),\n        runs,\n      } as TimelineRow;\n    });\n\n    return jobs;\n  }, [jobInfo, runsByJobKey]);\n\n  const jobsWithCompletedRunsAndOngoingRunsValues = useMemo(() => {\n    return Object.values(jobsWithCompletedRunsAndOngoingRuns);\n  }, [jobsWithCompletedRunsAndOngoingRuns]);\n\n  const unsortedJobs: TimelineRow[] = useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename === 'PythonError' || _end < Date.now()) {\n      return jobsWithCompletedRunsAndOngoingRunsValues;\n    }\n    const addedAdHocJobs = new Set();\n    const jobs: TimelineRow[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        !locationEntry.locationOrLoadError ||\n        locationEntry.locationOrLoadError?.__typename === 'PythonError'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (\n                  startTime > now &&\n                  overlap({start, end: _end}, {start: startTime, end: startTime})\n                ) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                    automation: {type: 'schedule', repoAddress, name: schedule.name},\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n\n          if (isAdHoc) {\n            if (addedAdHocJobs.has(jobKey)) {\n              continue;\n            }\n            addedAdHocJobs.add(jobKey);\n          }\n\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = Object.values(runsByJobKey[jobKey] || {});\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const runs = [...jobRuns, ...jobTicks];\n\n          let row = jobsWithCompletedRunsAndOngoingRuns[jobKey];\n          if (row) {\n            row = {...row, runs};\n          } else {\n            row = {\n              key: jobKey,\n              name: jobName,\n              type: isAdHoc ? 'asset' : 'job',\n              repoAddress,\n              path: workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: pipeline.name,\n                isJob: pipeline.isJob,\n              }),\n              runs,\n            } as TimelineRow;\n          }\n\n          jobs.push(row);\n        }\n      }\n    }\n    return jobs;\n    // Don't add start/end time as a dependency here since it changes often.\n    // Instead rely on the underlying runs changing in response to start/end changing\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    workspaceOrError,\n    jobsWithCompletedRunsAndOngoingRunsValues,\n    runsByJobKey,\n    jobsWithCompletedRunsAndOngoingRuns,\n  ]);\n\n  const jobsWithRuns = useMemo(() => {\n    const earliest = unsortedJobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        accum[job.key] = Math.min(...startTimes);\n        return accum;\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return unsortedJobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [unsortedJobs]);\n\n  const lastFetchRef = useRef({ongoing: 0, future: 0});\n  const lastRangeMs = useRef([0, 0] as readonly [number, number]);\n  if (Math.abs(lastRangeMs.current[0] - rangeMs[0]) > 30000) {\n    lastFetchRef.current.future = 0;\n  }\n  lastRangeMs.current = rangeMs;\n\n  const refreshState = useRefreshAtInterval({\n    refresh: useCallback(async () => {\n      const loadId = ++fetchIdRef.current;\n      setLoading(true);\n      await Promise.all([\n        // Only fetch ongoing runs once every 30 seconds\n        (async () => {\n          if (lastFetchRef.current.ongoing < Date.now() - 30 * 1000) {\n            await fetchOngoingRunsQueryData();\n            lastFetchRef.current.ongoing = Date.now();\n          }\n        })(),\n        // Only fetch future ticks once a minute\n        (async () => {\n          // If the the time range is in the past then future ticks are not visible on the timeline\n          if (_end > Date.now() && lastFetchRef.current.future < Date.now() - 60 * 1000) {\n            fetchFutureTicks();\n          }\n        })(),\n        fetchCompletedRunsQueryData(),\n      ]);\n      if (loadId === fetchIdRef.current) {\n        setLoading(false);\n      }\n    }, [fetchCompletedRunsQueryData, fetchFutureTicks, fetchOngoingRunsQueryData, _end]),\n    intervalMs: refreshInterval,\n    leading: true,\n  });\n\n  return {\n    jobs: jobsWithRuns,\n    loading,\n    refreshState,\n  };\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${isHiddenAssetGroupJob(jobName) ? '__adhoc__' : jobName}-${repoAddressAsHumanString(\n    repoAddress,\n  )}`;\n\nconst RUN_TIMELINE_FRAGMENT = gql`\n  fragment RunTimelineFragment on Run {\n    id\n    pipelineName\n    tags {\n      key\n      value\n    }\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n    ...RunTimeFragment\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n\nexport const ONGOING_RUN_TIMELINE_QUERY = gql`\n  query OngoingRunTimelineQuery($inProgressFilter: RunsFilter!, $limit: Int!, $cursor: String) {\n    ongoing: runsOrError(filter: $inProgressFilter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ...RunTimelineFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIMELINE_FRAGMENT}\n`;\n\nexport const COMPLETED_RUN_TIMELINE_QUERY = gql`\n  query CompletedRunTimelineQuery($completedFilter: RunsFilter!, $limit: Int!, $cursor: String) {\n    completed: runsOrError(filter: $completedFilter, limit: $limit, cursor: $cursor) {\n      ... on Runs {\n        results {\n          id\n          ...RunTimelineFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIMELINE_FRAGMENT}\n`;\n\nexport const FUTURE_TICKS_QUERY = gql`\n  query FutureTicksQuery($tickCursor: Float, $ticksUntil: Float) {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, Button, ButtonGroup, ErrorBoundary, TextInput} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {useDeferredValue, useMemo} from 'react';\n\nimport {GroupTimelineRunsBySelect} from './GroupTimelineRunsBySelect';\nimport {groupRunsByAutomation} from './groupRunsByAutomation';\nimport {useGroupTimelineRunsBy} from './useGroupTimelineRunsBy';\nimport {RefreshState} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {HourWindow, useHourWindow} from '../runs/useHourWindow';\nimport {useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 30 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\n\nexport function useTimelineRange({\n  maxNowMs,\n  hourWindowStorageKey,\n  hourWindowDefault = '12',\n  lookaheadHours = LOOKAHEAD_HOURS,\n}: {\n  maxNowMs?: number;\n  hourWindowStorageKey?: string;\n  hourWindowDefault?: HourWindow;\n  lookaheadHours?: number;\n}) {\n  const [hourWindow, setHourWindow] = useHourWindow(hourWindowDefault, hourWindowStorageKey);\n  const [now, setNow] = React.useState(() => maxNowMs || Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n\n  const rangeMs: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + lookaheadHours * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, lookaheadHours, offsetMsec],\n  );\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setNow(maxNowMs ? Math.min(maxNowMs, Date.now()) : Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow, maxNowMs]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  return {rangeMs, hourWindow, setHourWindow, onPageEarlier, onPageLater, onPageNow};\n}\n\nexport const OverviewTimelineRoot = ({Header}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const {rangeMs, hourWindow, setHourWindow, onPageEarlier, onPageLater, onPageNow} =\n    useTimelineRange({});\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n  const [groupRunsBy, setGroupRunsBy] = useGroupTimelineRunsBy();\n\n  const runsForTimelineRet = useRunsForTimeline({rangeMs});\n\n  // Use deferred value to allow paginating quickly with the UI feeling more responsive.\n  const {jobs, loading, refreshState} = useDeferredValue(runsForTimelineRet);\n\n  const rows = useMemo(() => {\n    return groupRunsBy === 'automation' ? groupRunsByAutomation(jobs) : jobs;\n  }, [groupRunsBy, jobs]);\n\n  const visibleRepoKeys = useMemo(() => {\n    return new Set(\n      visibleRepos.map((option) => {\n        const repoAddress = buildRepoAddress(\n          option.repository.name,\n          option.repositoryLocation.name,\n        );\n        return repoAddressAsHumanString(repoAddress);\n      }),\n    );\n  }, [visibleRepos]);\n\n  const visibleObjectKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const keys = rows\n      .filter(({repoAddress}) => visibleRepoKeys.has(repoAddressAsHumanString(repoAddress)))\n      .map(({key}) => key)\n      .filter((key) => key.toLocaleLowerCase().includes(searchLower));\n    return new Set(keys);\n  }, [searchValue, rows, visibleRepoKeys]);\n\n  const visibleRows = React.useMemo(\n    () => rows.filter(({key}) => visibleObjectKeys.has(key)),\n    [rows, visibleObjectKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        flex={{alignItems: 'center', justifyContent: 'space-between', gap: 16}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n            <div style={{whiteSpace: 'nowrap'}}>Group by</div>\n            <GroupTimelineRunsBySelect value={groupRunsBy} onSelect={setGroupRunsBy} />\n          </Box>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={loading} rangeMs={rangeMs} rows={visibleRows} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\nimport {Route} from '../app/Route';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nexport const OverviewActivityRoot = () => {\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <OverviewPageHeader tab=\"activity\" refreshState={refreshState} />\n    ),\n    [],\n  );\n\n  const [_defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const {enableAssetHealthOverviewPreview} = React.useContext(AssetFeatureContext);\n  const defaultTab = enableAssetHealthOverviewPreview ? 'timeline' : _defaultTab;\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (enableAssetHealthOverviewPreview) {\n        return null;\n      }\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab, enableAssetHealthOverviewPreview],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        {!enableAssetHealthOverviewPreview && (\n          <Route path=\"/overview/activity/assets\">\n            <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n          </Route>\n        )}\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          isNestingRoute\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {OverviewTabs} from './OverviewTabs';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {JobsPageContent} from '../jobs/JobsPageContent';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"jobs\" />} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedResourceHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={\n                      row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                    }\n                    placement=\"top\"\n                  >\n                    <Tag>{row.resourceCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && queryLoading && workspaceLoading;\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"resources\" refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewResourcesQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n} from './types/OverviewSchedules.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {useFilters} from '../ui/BaseFilters';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewSchedules = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, cachedData, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const loading = workspaceLoading && !repoCount && queryLoading && !data;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewSchedulesQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSchedules} from './OverviewSchedules';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"schedules\" />\n      <OverviewSchedules />\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedSensorHeader checkbox={headerCheckbox} />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            if (type === 'header') {\n              return (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              );\n            }\n\n            const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n            return (\n              <VirtualizedSensorRow\n                key={key}\n                name={row.sensor.name}\n                sensorState={row.sensor.sensorState}\n                showCheckboxColumn={!!headerCheckbox}\n                checked={checkedKeys.has(sensorKey)}\n                onToggleChecked={onToggleCheckFactory(sensorKey)}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewSensorsQuery, OverviewSensorsQueryVariables} from './types/OverviewSensors.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {SensorType} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {SENSOR_TYPE_META} from '../workspace/VirtualizedSensorRow';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nfunction toSetFilterValue(type: SensorType) {\n  const label = SENSOR_TYPE_META[type].name;\n  return {\n    label,\n    value: {type, label},\n    match: [label],\n  };\n}\n\nconst SENSOR_TYPE_TO_FILTER: Partial<Record<SensorType, ReturnType<typeof toSetFilterValue>>> = {\n  [SensorType.ASSET]: toSetFilterValue(SensorType.ASSET),\n  [SensorType.AUTO_MATERIALIZE]: toSetFilterValue(SensorType.AUTO_MATERIALIZE),\n  [SensorType.AUTOMATION]: toSetFilterValue(SensorType.AUTOMATION),\n  [SensorType.FRESHNESS_POLICY]: toSetFilterValue(SensorType.FRESHNESS_POLICY),\n  [SensorType.MULTI_ASSET]: toSetFilterValue(SensorType.MULTI_ASSET),\n  [SensorType.RUN_STATUS]: toSetFilterValue(SensorType.RUN_STATUS),\n  [SensorType.STANDARD]: toSetFilterValue(SensorType.STANDARD),\n};\nconst ALL_SENSOR_TYPE_FILTERS = Object.values(SENSOR_TYPE_TO_FILTER);\n\nexport const OverviewSensors = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const [sensorTypes, setSensorTypes] = useQueryPersistedState<Set<SensorType>>({\n    encode: (vals) => ({sensorType: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.sensorType?.split(',') as SensorType[]) || []),\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n  const sensorTypeFilter = useStaticSetFilter({\n    name: 'Sensor type',\n    allValues: ALL_SENSOR_TYPE_FILTERS,\n    icon: 'sensors',\n    getStringValue: (value) => value.label,\n    state: useMemo(() => {\n      return new Set(Array.from(sensorTypes).map((type) => SENSOR_TYPE_TO_FILTER[type]!.value));\n    }, [sensorTypes]),\n\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setSensorTypes(new Set(Array.from(state).map((value) => value.type)));\n    },\n  });\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n    [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, cachedData, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, sensorType}) => {\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (sensorTypes.size && !sensorTypes.has(sensorType)) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, runningState, sensorTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const loading = workspaceLoading && queryLoading && !data;\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Tooltip\n            content=\"You do not have permission to start or stop these schedules\"\n            canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n            placement=\"top-end\"\n            useDisabledButtonTooltipFix\n          >\n            <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n          </Tooltip>\n        </Box>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewSensorsQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n) => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSensors} from './OverviewSensors';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"sensors\" />\n      <OverviewSensors />\n    </Box>\n  );\n};\n","import {useCallback, useEffect, useMemo} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {Box, Checkbox, Colors, Spinner, Subtitle2, Table} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {DeclarativeAutomationBanner} from './DeclarativeAutomationBanner';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useLazyQuery} from '../../apollo-client';\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const GlobalAutomaterializationContent = () => {\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const getVariables = useCallback(\n    (now = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        afterTimestamp: (now - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    return data?.autoMaterializeTicks || [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks?.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}}>\n        <DeclarativeAutomationBanner />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\nimport {Redirect} from 'react-router-dom';\n\nimport {GlobalAutomaterializationContent} from './GlobalAutomaterializationContent';\nimport {useFeatureFlags} from '../../app/Flags';\nimport {assertUnreachable} from '../../app/Util';\nimport {useTrackPageView} from '../../app/analytics';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../../overview/OverviewPageHeader';\nimport {useAutoMaterializeSensorFlag} from '../AutoMaterializeSensorFlag';\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to either the merged Automations page or the Sensors overview,\n// depending on their nav flag state.\nexport const AutomaterializationRoot = () => {\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  const {flagSettingsPage} = useFeatureFlags();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomaterializationRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to={flagSettingsPage ? '/automation' : '/overview/sensors'} />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomaterializationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Auto-materialize');\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"amp\" />\n      <GlobalAutomaterializationContent />\n    </Page>\n  );\n};\n","import {\n  Box,\n  Colors,\n  CursorPaginationControls,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\n\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {DaemonNotRunningAlert, useIsBackfillDaemonHealthy} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n    case BulkActionStatus.COMPLETED_SUCCESS:\n      return 'Success';\n    case BulkActionStatus.COMPLETED_FAILED:\n      return 'Failed';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const [statusState, setStatusState] = useQueryPersistedState<Set<BulkActionStatus>>({\n    encode: (vals) => ({status: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.status?.split(',') as BulkActionStatus[]) || []),\n  });\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n    state: statusState,\n    onStateChanged: setStatusState,\n  });\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const isDaemonHealthy = useIsBackfillDaemonHealthy();\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <div>\n        {isDaemonHealthy ? null : (\n          <Box padding={{horizontal: 24, bottom: 16}}>\n            <DaemonNotRunningAlert />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 12, horizontal: 20}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {content()}\n    </>\n  );\n};\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {Page} from '@dagster-io/ui-components';\n\nimport {InstanceBackfills} from './InstanceBackfills';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../overview/OverviewPageHeader';\n\nexport const InstanceBackfillsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"backfills\" />\n      <InstanceBackfills />\n    </Page>\n  );\n};\n","import {DocumentNode} from 'graphql';\nimport {useEffect, useMemo, useState} from 'react';\n\nimport {OperationVariables, useApolloClient} from '../apollo-client';\nimport {useRefreshAtInterval} from '../app/QueryRefresh';\n\ntype FetchResult<DataType, CursorType, ErrorType> = {\n  data: DataType[];\n  hasMore: boolean;\n  cursor: CursorType | undefined;\n  error: ErrorType | undefined;\n};\n\ntype FetcherFunction<DataType, CursorType, ErrorType> = (\n  cursor: CursorType | undefined,\n) => Promise<FetchResult<DataType, CursorType, ErrorType>>;\n\nclass AccumulatingDataFetcher<DataType, CursorType, ErrorType> {\n  private fetchData: FetcherFunction<DataType, CursorType, ErrorType>;\n  private onData: (data: DataType[]) => void;\n  private onError?: (error: ErrorType) => void;\n\n  private hasMoreData = true;\n  private dataSoFar: DataType[] = [];\n  private currentCursor: CursorType | undefined = undefined;\n  private fetchPromise?: Promise<void>;\n  private stopped: boolean = false;\n\n  constructor({\n    fetchData,\n    onData,\n    onError,\n  }: {\n    fetchData: FetcherFunction<DataType, CursorType, ErrorType>;\n    onData: (data: DataType[]) => void;\n    onError?: (error: ErrorType) => void;\n  }) {\n    this.fetchData = fetchData;\n    this.onData = onData;\n    this.onError = onError;\n  }\n\n  fetch = async () => {\n    if (this.fetchPromise) {\n      return await this.fetchPromise;\n    }\n    this.fetchPromise = new Promise(async (res) => {\n      // make at least one request\n      this.hasMoreData = true;\n\n      // continue requesting with updated cursors + accumulating data until\n      // stop() is called or hasMore=false.\n      while (this.hasMoreData && !this.stopped) {\n        const {cursor, hasMore, data, error} = await this.fetchData(this.currentCursor);\n        if (this.stopped) {\n          break;\n        }\n        if (error) {\n          this.onError?.(error);\n          break;\n        }\n        this.currentCursor = cursor;\n        this.hasMoreData = hasMore;\n        if (data.length > 0) {\n          this.dataSoFar = this.dataSoFar.concat(data);\n          this.onData(this.dataSoFar);\n        }\n      }\n      res();\n    });\n    const result = await this.fetchPromise!;\n    this.fetchPromise = undefined;\n    return result;\n  };\n\n  stop = () => {\n    this.stopped = true;\n  };\n}\n\nexport function useCursorAccumulatedQuery<\n  TQuery,\n  TVars extends OperationVariables & {cursor?: CursorType},\n  DataType,\n  ErrorType = unknown,\n  CursorType = TVars['cursor'],\n>({\n  query,\n  variables,\n  getResult,\n}: {\n  query: DocumentNode;\n  variables: Omit<TVars, 'cursor'>;\n  getResult: (responseData: TQuery) => FetchResult<DataType, CursorType, ErrorType>;\n}) {\n  const [fetched, setFetched] = useState<DataType[] | null>(null);\n  const [error, setError] = useState<ErrorType | null>(null);\n  const client = useApolloClient();\n\n  const {stop, fetch} = useMemo(() => {\n    return new AccumulatingDataFetcher({\n      fetchData: async (cursor) => {\n        const resp = await client.query<TQuery, TVars>({\n          variables: {...variables, cursor} as TVars,\n          query,\n        });\n        return getResult(resp.data);\n      },\n      onData: setFetched,\n      onError: setError,\n    });\n  }, [client, query, variables, getResult]);\n\n  useEffect(() => {\n    return stop;\n  }, [stop]);\n\n  const refreshState = useRefreshAtInterval({\n    refresh: fetch,\n    intervalMs: 10000,\n    leading: true,\n  });\n\n  return {fetched, error, refreshState};\n}\n","import {Box, NonIdealState, Spinner} from '@dagster-io/ui-components';\nimport React, {useMemo} from 'react';\n\nimport {BackfillLogsPageQuery, BackfillLogsPageQueryVariables} from './types/BackfillLogsTab.types';\nimport {BackfillDetailsBackfillFragment} from './types/BackfillPage.types';\nimport {gql} from '../../apollo-client';\nimport {QueryRefreshCountdown} from '../../app/QueryRefresh';\nimport {useCursorAccumulatedQuery} from '../../runs/useCursorAccumulatedQuery';\nimport {\n  INSTIGATION_EVENT_LOG_FRAGMENT,\n  InstigationEventLogTable,\n} from '../../ticks/InstigationEventLogTable';\nimport {InstigationEventLogFragment} from '../../ticks/types/InstigationEventLogTable.types';\n\nconst getResultForBackfillLogsPage = (e: BackfillLogsPageQuery) => {\n  if (e.partitionBackfillOrError.__typename === 'PartitionBackfill') {\n    const {events, hasMore, cursor} = e.partitionBackfillOrError.logEvents;\n    return {data: events, hasMore, cursor, error: undefined};\n  } else {\n    return {data: [], hasMore: false, error: e.partitionBackfillOrError, cursor: undefined};\n  }\n};\n\nexport const BackfillLogsTab = ({backfill}: {backfill: BackfillDetailsBackfillFragment}) => {\n  const {\n    error,\n    fetched: events,\n    refreshState,\n  } = useCursorAccumulatedQuery<\n    BackfillLogsPageQuery,\n    BackfillLogsPageQueryVariables,\n    InstigationEventLogFragment,\n    {message: string}\n  >({\n    query: BACKFILL_LOGS_PAGE_QUERY,\n    variables: useMemo(() => ({backfillId: backfill.id}), [backfill]),\n    getResult: getResultForBackfillLogsPage,\n  });\n\n  const content = () => {\n    if (error) {\n      <Box flex={{justifyContent: 'center', alignItems: 'center'}} style={{flex: 1}}>\n        <NonIdealState title=\"Unable to fetch logs\" description={error.message} />\n      </Box>;\n    }\n    if (events === null) {\n      return (\n        <Box flex={{justifyContent: 'center', alignItems: 'center'}} style={{flex: 1}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (events.length === 0) {\n      return (\n        <Box flex={{justifyContent: 'center', alignItems: 'center'}} style={{flex: 1}}>\n          <NonIdealState\n            title=\"No logs available\"\n            description=\"If backfill log storage is enabled, logs will appear as they are emitted by the backfill daemon.\"\n          />\n        </Box>\n      );\n    }\n    return <InstigationEventLogTable events={events} />;\n  };\n  return (\n    <>\n      <div style={{position: 'absolute', right: 16, top: -32}}>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </div>\n      {content()}\n    </>\n  );\n};\n\nexport const BACKFILL_LOGS_PAGE_QUERY = gql`\n  query BackfillLogsPageQuery($backfillId: String!, $cursor: String) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      __typename\n      ... on PythonError {\n        message\n      }\n      ... on BackfillNotFoundError {\n        message\n      }\n      ... on PartitionBackfill {\n        id\n        logEvents(cursor: $cursor) {\n          ... on InstigationEventConnection {\n            cursor\n            hasMore\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  MiddleTruncate,\n  NonIdealState,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport React, {useRef} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BackfillDetailsBackfillFragment} from './types/BackfillPage.types';\nimport {gql, useApolloClient} from '../../apollo-client';\nimport {displayNameForAssetKey, tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, RunStatus} from '../../graphql/types';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\nimport {Container, HeaderCell, HeaderRow, Inner, Row, RowCell} from '../../ui/VirtualizedTable';\nimport {numberFormatter} from '../../ui/formatters';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n} from '../backfill/types/BackfillPage.types';\n\nconst TEMPLATE_COLUMNS = '60% repeat(4, 1fr)';\n\ntype AssetBackfillStatus = NonNullable<\n  BackfillDetailsBackfillFragment['assetBackfillData']\n>['assetBackfillStatuses'][0];\n\nexport const BackfillPartitionsTab = ({backfill}: {backfill: BackfillDetailsBackfillFragment}) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n\n  const assetStatuses: AssetBackfillStatus[] =\n    backfill.assetBackfillData?.assetBackfillStatuses ?? [];\n\n  const rowVirtualizer = useVirtualizer({\n    count: assetStatuses.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!assetStatuses.length) {\n    return (\n      <Box margin={48}>\n        <NonIdealState\n          title=\"Partition statuses unavailable\"\n          description=\"Dagster was unable to load per-partition statuses. This may occur if the backfilled assets or jobs no longer exist in your loaded code locations.\"\n        />\n      </Box>\n    );\n  }\n  return (\n    <Container ref={parentRef}>\n      <VirtualizedBackfillPartitionsHeader backfill={backfill} />\n      <Inner $totalHeight={totalHeight}>\n        {items.map(({index, key, size, start}) => (\n          <VirtualizedBackfillPartitionsRow\n            key={key}\n            asset={assetStatuses[index]!}\n            backfill={backfill}\n            height={size}\n            start={start}\n          />\n        ))}\n      </Inner>\n    </Container>\n  );\n};\n\nfunction getRunsUrl(backfillId: string, status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n  const filters: RunFilterToken[] = [\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfillId}`,\n    },\n  ];\n  switch (status) {\n    case 'inProgress':\n      filters.push(\n        {\n          token: 'status',\n          value: RunStatus.STARTED,\n        },\n        {\n          token: 'status',\n          value: RunStatus.QUEUED,\n        },\n        {\n          token: 'status',\n          value: RunStatus.STARTING,\n        },\n        {\n          token: 'status',\n          value: RunStatus.CANCELING,\n        },\n        {\n          token: 'status',\n          value: RunStatus.NOT_STARTED,\n        },\n      );\n      break;\n    case 'complete':\n      filters.push({\n        token: 'status',\n        value: RunStatus.SUCCESS,\n      });\n      break;\n    case 'failed':\n      filters.push({\n        token: 'status',\n        value: RunStatus.FAILURE,\n      });\n      filters.push({\n        token: 'status',\n        value: RunStatus.CANCELED,\n      });\n      break;\n  }\n  return runsPathWithFilters(filters);\n}\n\nexport const VirtualizedBackfillPartitionsHeader = ({\n  backfill,\n}: {\n  backfill: BackfillDetailsBackfillFragment;\n}) => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Asset name</HeaderCell>\n      <HeaderCell>\n        <Link to={getRunsUrl(backfill.id, 'targeted')}>Partitions targeted</Link>\n      </HeaderCell>\n      <HeaderCell>\n        <Link to={getRunsUrl(backfill.id, 'inProgress')}>In progress</Link>\n      </HeaderCell>\n      <HeaderCell>\n        <Link to={getRunsUrl(backfill.id, 'complete')}>Completed</Link>\n      </HeaderCell>\n      <HeaderCell>\n        <Link to={getRunsUrl(backfill.id, 'failed')}>Failed</Link>\n      </HeaderCell>\n    </HeaderRow>\n  );\n};\n\nexport const VirtualizedBackfillPartitionsRow = ({\n  asset,\n  backfill,\n  height,\n  start,\n}: {\n  asset: AssetBackfillStatus;\n  backfill: BackfillDetailsBackfillFragment;\n  height: number;\n  start: number;\n}) => {\n  let targeted;\n  let inProgress;\n  let completed;\n  let failed;\n  if (asset.__typename === 'AssetPartitionsStatusCounts') {\n    targeted = asset.numPartitionsTargeted;\n    inProgress = asset.numPartitionsInProgress;\n    completed = asset.numPartitionsMaterialized;\n    failed = asset.numPartitionsFailed;\n  } else {\n    targeted = 1;\n    failed = asset.failed ? 1 : 0;\n    inProgress = asset.inProgress ? 1 : 0;\n    completed = asset.materialized ? 1 : 0;\n  }\n\n  const client = useApolloClient();\n  const history = useHistory();\n\n  const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n    let params: AssetViewParams = {};\n\n    if (isPartitioned) {\n      const resp = await client.query<\n        BackfillPartitionsForAssetKeyQuery,\n        BackfillPartitionsForAssetKeyQueryVariables\n      >({\n        query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n        variables: {backfillId: backfill.id, assetKey: asAssetKeyInput(assetKey)},\n      });\n      const data =\n        resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n          ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n          : null;\n\n      if (data && data.ranges?.length) {\n        params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n      }\n    }\n    return history.push(assetDetailsPathForKey(assetKey, params));\n  };\n\n  return (\n    <Row\n      $height={height}\n      $start={start}\n      data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n    >\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between'}} style={{minWidth: 0}}>\n            <ButtonLink\n              style={{minWidth: 0}}\n              onClick={() =>\n                onShowAssetDetails(\n                  asset.assetKey,\n                  asset.__typename === 'AssetPartitionsStatusCounts',\n                )\n              }\n            >\n              <MiddleTruncate text={displayNameForAssetKey(asset.assetKey)} />\n            </ButtonLink>\n            <StatusBar\n              targeted={targeted}\n              inProgress={inProgress}\n              completed={completed}\n              failed={failed}\n            />\n          </Box>\n        </RowCell>\n        {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n          <>\n            <RowCell>{numberFormatter.format(targeted)}</RowCell>\n            <RowCell>{numberFormatter.format(inProgress)}</RowCell>\n            <RowCell>{numberFormatter.format(completed)}</RowCell>\n            <RowCell>{numberFormatter.format(failed)}</RowCell>\n          </>\n        ) : (\n          <>\n            <RowCell>-</RowCell>\n            <RowCell>\n              {inProgress ? (\n                <Tag icon=\"spinner\" intent=\"primary\">\n                  In progress\n                </Tag>\n              ) : (\n                '-'\n              )}\n            </RowCell>\n            <RowCell>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</RowCell>\n            <RowCell>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</RowCell>\n          </>\n        )}\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundLight(),\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.accentGreen()}} />\n      <div style={{background: Colors.accentRed()}} />\n      <div style={{background: Colors.accentBlue()}} />\n    </div>\n  );\n}\n","import {Box, Colors, Spinner, useViewport} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {RunStatusDot} from '../../runs/RunStatusDots';\nimport {\n  CONSTANTS,\n  RunChunk,\n  RunChunks,\n  TimeDividers,\n  TimelineRowContainer,\n} from '../../runs/RunTimeline';\nimport {TimelineRun} from '../../runs/RunTimelineTypes';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {RunBatch, batchRunsForTimeline} from '../../runs/batchRunsForTimeline';\nimport {mergeStatusToBackground} from '../../runs/mergeStatusToBackground';\nimport {Container, Inner} from '../../ui/VirtualizedTable';\n\nconst {DATE_TIME_HEIGHT, ONE_HOUR_MSEC, EMPTY_STATE_HEIGHT, LEFT_SIDE_SPACE_ALLOTTED} = CONSTANTS;\n\ntype Props = {\n  loading?: boolean;\n  runs: TimelineRun[];\n  rangeMs: [number, number];\n  annotations: {label: string; ms: number}[];\n  now: number;\n};\n\nexport const ExecutionTimeline = (props: Props) => {\n  const {loading = false, runs, rangeMs, annotations, now} = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const {\n    viewport: {width, height},\n    containerProps: {ref: measureRef},\n  } = useViewport();\n\n  const rowVirtualizer = useVirtualizer({\n    count: runs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!width) {\n    return <div style={{height: DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT}} ref={measureRef} />;\n  }\n\n  return (\n    <>\n      <Box\n        padding={{left: 24}}\n        border=\"bottom\"\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{\n          fontSize: '16px',\n          flex: `0 0 ${DATE_TIME_HEIGHT}px`,\n        }}\n      />\n      <div style={{position: 'relative'}}>\n        <TimeDividers\n          now={now}\n          interval={rangeMs[1] - rangeMs[0] > ONE_HOUR_MSEC * 4 ? ONE_HOUR_MSEC : ONE_HOUR_MSEC / 6}\n          rangeMs={rangeMs}\n          annotations={annotations}\n          height={runs.length > 0 ? height : 0}\n        />\n      </div>\n      {runs.length ? (\n        <div ref={measureRef} style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => (\n                <ExecutionTimelineRow\n                  key={key}\n                  run={runs[index]!}\n                  top={start}\n                  height={size}\n                  range={rangeMs}\n                  width={width}\n                />\n              ))}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <div ref={measureRef}>\n          <ExecutionTimelineEmptyOrLoading loading={loading} />\n        </div>\n      )}\n    </>\n  );\n};\n\nconst ExecutionTimelineEmptyOrLoading = (props: {loading: boolean}) => {\n  const {loading} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          Loading runs\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>No runs were executing in this time period.</div>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.backgroundDefault()}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border=\"top-and-bottom\"\n    >\n      {content()}\n    </Box>\n  );\n};\n\nexport const ExecutionTimelineRow = ({\n  run,\n  top,\n  height,\n  range,\n  width: containerWidth,\n}: {\n  run: TimelineRun;\n  top: number;\n  height: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n\n  const chunk = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs: [run],\n      start,\n      end,\n      width,\n      minChunkWidth: 4,\n      minMultipleWidth: 4,\n    });\n\n    return batches[0];\n  }, [run, start, end, width]);\n\n  return (\n    <TimelineRowContainer $height={height} $start={top}>\n      <Box\n        style={{width: LEFT_SIDE_SPACE_ALLOTTED}}\n        padding={{horizontal: 24}}\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n      >\n        <Box flex={{alignItems: 'center', gap: 4}}>\n          <RunStatusDot status={run.status} size={12} />\n          <Link to={`/runs/${run.id}`}>{run.id.slice(0, 8)}</Link>\n        </Box>\n        <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n      </Box>\n      <RunChunks>\n        {chunk && (\n          <RunChunk\n            $background={mergeStatusToBackground(chunk.runs)}\n            $multiple={false}\n            style={{\n              left: `${chunk.left}px`,\n              width: `${chunk.width}px`,\n            }}\n          />\n        )}\n      </RunChunks>\n    </TimelineRowContainer>\n  );\n};\n","import {\n  Box,\n  Button,\n  ButtonGroup,\n  Colors,\n  CursorHistoryControls,\n  ErrorBoundary,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\nimport React, {useDeferredValue, useMemo} from 'react';\n\nimport {ExecutionTimeline} from './ExecutionTimeline';\nimport {BackfillDetailsBackfillFragment} from './types/BackfillPage.types';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../../app/QueryRefresh';\nimport {RunsFilter} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useTimelineRange} from '../../overview/OverviewTimelineRoot';\nimport {RunTable} from '../../runs/RunTable';\nimport {DagsterTag} from '../../runs/RunTag';\nimport {HourWindow} from '../../runs/useHourWindow';\nimport {usePaginatedRunsTableRuns} from '../../runs/usePaginatedRunsTableRuns';\nimport {useRunsForTimeline} from '../../runs/useRunsForTimeline';\nimport {StickyTableContainer} from '../../ui/StickyTableContainer';\n\nconst BACKFILL_RUNS_HOUR_WINDOW_KEY = 'dagster.backfill-run-timeline-hour-window';\nconst PAGE_SIZE = 25;\n\nexport const BackfillRunsTab = ({backfill}: {backfill: BackfillDetailsBackfillFragment}) => {\n  const [view, setView] = useQueryPersistedState<'timeline' | 'list'>({\n    defaults: {view: 'timeline'},\n    queryKey: 'view',\n  });\n\n  const {rangeMs, hourWindow, setHourWindow, onPageEarlier, onPageLater, onPageNow} =\n    useTimelineRange({\n      maxNowMs: backfill.endTimestamp ? backfill.endTimestamp * 1000 : undefined,\n      hourWindowStorageKey: BACKFILL_RUNS_HOUR_WINDOW_KEY,\n      hourWindowDefault: '1',\n      lookaheadHours: 0.1, // no ticks, so miminal \"future\" needed\n    });\n\n  const filter: RunsFilter = useMemo(\n    () => ({tags: [{key: DagsterTag.Backfill, value: backfill.id}]}),\n    [backfill],\n  );\n\n  const annotations = useMemo(\n    () =>\n      backfill.endTimestamp\n        ? [\n            {ms: backfill.timestamp * 1000, label: 'Start'},\n            {ms: backfill.endTimestamp * 1000, label: 'End'},\n          ]\n        : [{ms: backfill.timestamp * 1000, label: 'Start'}],\n    [backfill.timestamp, backfill.endTimestamp],\n  );\n\n  const actionBarComponents = (\n    <Box flex={{direction: 'row', gap: 16}} style={{position: 'sticky', top: 0}}>\n      <ButtonGroup\n        activeItems={new Set([view])}\n        onClick={(id: 'timeline' | 'list') => {\n          setView(id);\n        }}\n        buttons={[\n          {id: 'timeline', icon: 'gantt_waterfall', label: 'Timeline'},\n          {id: 'list', icon: 'list', label: 'List'},\n        ]}\n      />\n      <div style={{flex: 1}} />\n      {view === 'timeline' && (\n        <ButtonGroup<HourWindow>\n          activeItems={new Set([hourWindow])}\n          buttons={[\n            {id: '1', label: '1hr'},\n            {id: '6', label: '6hr'},\n            {id: '12', label: '12hr'},\n            {id: '24', label: '24hr'},\n          ]}\n          onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n        />\n      )}\n      {view === 'timeline' && (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Button onClick={onPageEarlier}>&larr;</Button>\n          <Button onClick={onPageNow}>{backfill.endTimestamp ? 'Jump to end' : 'Now'}</Button>\n          <Button onClick={onPageLater}>&rarr;</Button>\n        </Box>\n      )}\n    </Box>\n  );\n\n  return view === 'timeline' ? (\n    <ExecutionRunTimeline\n      filter={filter}\n      rangeMs={rangeMs}\n      annotations={annotations}\n      actionBarComponents={actionBarComponents}\n    />\n  ) : (\n    <ExecutionRunTable filter={filter} actionBarComponents={actionBarComponents} />\n  );\n};\n\nconst ExecutionRunTable = ({\n  filter,\n  actionBarComponents,\n}: {\n  filter: RunsFilter;\n  actionBarComponents: React.ReactNode;\n}) => {\n  const {queryResult, paginationProps} = usePaginatedRunsTableRuns(filter, PAGE_SIZE);\n  const pipelineRunsOrError = queryResult.data?.pipelineRunsOrError;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 15000);\n\n  if (!pipelineRunsOrError) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n  if (pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState icon=\"error\" title=\"Query error\" description={pipelineRunsOrError.message} />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'absolute', right: 16, top: -32}}>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </div>\n      <Box style={{flex: 1, overflowY: 'auto'}}>\n        <StickyTableContainer $top={56}>\n          <RunTable\n            runs={pipelineRunsOrError.results}\n            emptyState={() => (\n              <Box\n                padding={{vertical: 24}}\n                border=\"top-and-bottom\"\n                flex={{direction: 'column', alignItems: 'center'}}\n              >\n                No runs have been launched.\n              </Box>\n            )}\n            actionBarComponents={actionBarComponents}\n            actionBarSticky\n          />\n          {pipelineRunsOrError.results.length > 0 ? (\n            <Box margin={{vertical: 16}}>\n              <CursorHistoryControls {...paginationProps} />\n            </Box>\n          ) : null}\n        </StickyTableContainer>\n      </Box>\n    </>\n  );\n};\n\nconst ExecutionRunTimeline = ({\n  rangeMs,\n  annotations,\n  filter,\n  actionBarComponents,\n}: {\n  rangeMs: [number, number];\n  annotations: {label: string; ms: number}[];\n  filter: RunsFilter; // note: must be memoized\n  actionBarComponents: React.ReactNode;\n}) => {\n  const runsForTimelineRet = useRunsForTimeline({\n    refreshInterval: 2 * FIFTEEN_SECONDS,\n    showTicks: false,\n    rangeMs,\n    filter,\n  });\n\n  // Use deferred value to allow paginating quickly with the UI feeling more responsive.\n  const {jobs, loading} = useDeferredValue(runsForTimelineRet);\n\n  // Unwrap the timeline to show runs on separate rows, and sort them explicitly by\n  // newest => oldest so that they match what you see in the \"List\" tab.\n  const row = jobs[0];\n  const {runs, now} = React.useMemo(() => {\n    const now = Date.now();\n    return row\n      ? {runs: [...row.runs].sort((a, b) => b.startTime - a.startTime), now}\n      : {runs: [], now};\n  }, [row]);\n\n  return (\n    <>\n      <div style={{position: 'absolute', right: 16, top: -32}}>\n        <QueryRefreshCountdown refreshState={runsForTimelineRet.refreshState} />\n      </div>\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        style={{position: 'sticky', top: 0, zIndex: 2, background: Colors.backgroundDefault()}}\n        border=\"bottom\"\n      >\n        {actionBarComponents}\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <ExecutionTimeline\n          loading={loading}\n          rangeMs={rangeMs}\n          annotations={annotations}\n          runs={runs}\n          now={now}\n        />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {\n  Alert,\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  Tab,\n  Tabs,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {useContext, useEffect, useReducer} from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillLogsTab} from './BackfillLogsTab';\nimport {BackfillPartitionsTab} from './BackfillPartitionsTab';\nimport {BackfillRunsTab} from './BackfillRunsTab';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\nimport {gql, useQuery} from '../../apollo-client';\nimport {CloudOSSContext} from '../../app/CloudOSSContext';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {\n  DaemonNotRunningAlert,\n  useIsBackfillDaemonHealthy,\n} from '../../partitions/BackfillMessaging';\nimport {testId} from '../../testing/testId';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const {featureContext} = useContext(CloudOSSContext);\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'partitions' | 'logs' | 'runs'>({\n    queryKey: 'tab',\n    defaults: {tab: 'partitions'},\n  });\n\n  const isDaemonHealthy = useIsBackfillDaemonHealthy();\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data, error} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <BackfillDuration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n\n        {isDaemonHealthy ? null : (\n          <Box padding={{horizontal: 24, bottom: 16}}>\n            <DaemonNotRunningAlert />\n          </Box>\n        )}\n\n        <Box padding={{left: 24}} border=\"bottom\">\n          <Tabs size=\"large\" selectedTabId={selectedTab}>\n            <Tab id=\"partitions\" title=\"Partitions\" onClick={() => setSelectedTab('partitions')} />\n            <Tab id=\"runs\" title=\"Runs\" onClick={() => setSelectedTab('runs')} />\n            {featureContext.canSeeBackfillCoordinatorLogs ? (\n              <Tab id=\"logs\" title=\"Coordinator logs\" onClick={() => setSelectedTab('logs')} />\n            ) : null}\n          </Tabs>\n        </Box>\n\n        {error?.graphQLErrors && (\n          <Alert intent=\"error\" title={error.graphQLErrors.map((err) => err.message)} />\n        )}\n        <Box flex={{direction: 'column'}} style={{flex: 1, position: 'relative', minHeight: 0}}>\n          {selectedTab === 'partitions' && <BackfillPartitionsTab backfill={backfill} />}\n          {selectedTab === 'runs' && <BackfillRunsTab backfill={backfill} />}\n          {selectedTab === 'logs' && <BackfillLogsTab backfill={backfill} />}\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.textLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Box>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nconst Label = styled.div`\n  color: ${Colors.textLight()};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst BackfillDuration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = useReducer((s: number, _: any) => s + 1, 0);\n  useEffect(() => {\n    if (end) {\n      return;\n    }\n    const intervalId = setInterval(rerender, 1000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...BackfillDetailsBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment BackfillDetailsBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  } else if (seconds > 0) {\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {useFeatureFlags} from '../app/Flags';\nimport {Route} from '../app/Route';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfillsRoot} from '../instance/InstanceBackfillsRoot';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nexport const OverviewRoot = () => {\n  const {flagSettingsPage} = useFeatureFlags();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\" isNestingRoute>\n        <OverviewActivityRoot />\n      </Route>\n      <Route\n        path=\"/overview/jobs\"\n        render={() => (flagSettingsPage ? <Redirect to=\"/jobs\" /> : <OverviewJobsRoot />)}\n      />\n      <Route\n        path=\"/overview/schedules\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation\" /> : <OverviewSchedulesRoot />\n        }\n      />\n      <Route\n        path=\"/overview/sensors\"\n        render={() => (flagSettingsPage ? <Redirect to=\"/automation\" /> : <OverviewSensorsRoot />)}\n      />\n      <Route\n        path=\"/overview/automation\"\n        render={() =>\n          flagSettingsPage && automaterializeSensorsFlagState !== 'has-global-amp' ? (\n            <Redirect to=\"/automation\" />\n          ) : (\n            <AutomaterializationRoot />\n          )\n        }\n      />\n      <Route path=\"/overview/backfills/:backfillId\" render={() => <BackfillPage />} />\n      <Route path=\"/overview/backfills\" exact render={() => <InstanceBackfillsRoot />} />\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" isNestingRoute render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n","import {Colors, JoinedButtons, TokenizingFieldValue} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport {useMemo} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled, {css} from 'styled-components';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunStatus, RunsFilter} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'failed':\n      return 'Runs | Failed';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\nexport const useRunListTabs = (filter: RunsFilter = {}) => {\n  const queryResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = queryResult;\n  const {queuedCount, inProgressCount} = useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  const tabs = (\n    <JoinedButtons>\n      <ActivatableButton to={urlForStatus([])} id=\"all\" $active={selectedTab === 'all'}>\n        All runs\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n        $active={selectedTab === 'queued'}\n      >\n        Queued ({queuedCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n        $active={selectedTab === 'in-progress'}\n      >\n        In progress ({inProgressCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(failedStatuses))}\n        id=\"failed\"\n        $active={selectedTab === 'failed'}\n      >\n        Failed\n      </ActivatableButton>\n      <ActivatableButton\n        title=\"Scheduled\"\n        to=\"/runs/scheduled\"\n        id=\"scheduled\"\n        $active={selectedTab === 'scheduled'}\n      >\n        Scheduled\n      </ActivatableButton>\n    </JoinedButtons>\n  );\n\n  return {tabs, queryResult};\n};\n\nexport const ActivatableButton = styled(AnchorButton)<{$active: boolean}>`\n  color: ${Colors.textLight()};\n\n  &&:hover {\n    color: ${Colors.textLight()};\n  }\n\n  ${({$active}) =>\n    $active\n      ? css`\n          background-color: ${Colors.backgroundLighterHover()};\n          color: ${Colors.textDefault()};\n\n          &&:hover {\n            background-color: ${Colors.backgroundLighterHover()};\n            color: ${Colors.textDefault()};\n          }\n        `\n      : css`\n          background-color: ${Colors.backgroundDefault()};\n        `}\n`;\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(failedStatuses, statusTokens)) {\n    return 'failed';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n"],"names":["OverviewAssetsRoot","Header","TabButton","param","useTrackPageView","useDocumentTitle","assets","query","error","loading","useAllAssets","refreshState","useRefreshAtInterval","refresh","intervalMs","FIFTEEN_SECONDS","leading","groupedAssetsUnfiltered","React","groupAssets","groups","forEach","asset","definition","groupName","repositoryName","repository","name","key","concat","target","push","Object","values","searchValue","setSearchValue","useQueryPersistedState","queryKey","decode","qs","searchQuery","JSON","parse","encode","stringify","undefined","groupedAssets","filter","group","UNGROUPED_ASSETS","toLowerCase","includes","orderedAssets","flatMap","map","useAssetsBaseData","parentRef","rowVirtualizer","useVirtualizer","count","length","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","jsxs","Fragment","div","style","position","top","zIndex","jsx","Box","padding","horizontal","vertical","flex","alignItems","gap","grow","selected","TextInput","value","onChange","e","placeholder","border","Alert","intent","title","description","Link","to","justifyContent","direction","width","Spinner","purpose","PythonErrorInfo","overflow","Container","ref","VirtualHeaderRow","Inner","$totalHeight","index","size","start","VirtualRow","height","TEMPLATE_COLUMNS","HeaderRow","templateColumns","sticky","HeaderCell","assetKeys","path","liveDataByNode","statuses","groupAssetsByStatus","repo","find","repoAddress","buildRepoAddress","location","containerProps","viewport","useViewport","isBatchStillLoading","keys","zeroOrBlank","Row","$height","$start","RowGrid","Cell","Icon","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","missing","SelectOnHover","getCount","status","case","StatusCase","PARTITIONS_MISSING","numMissing","adjective","Tag","Colors","borderRadius","failed","PARTITIONS_FAILED","numFailed","borderLeft","borderRight","borderBottom","display","inprogress","MATERIALIZING","numMaterializing","icon","successful","PARTITIONS_MATERIALIZED","numMaterialized","backgroundColor","styled","children","RowCell","color","withConfig","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","assetDetailsPathForKey","MenuItem","text","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","OverviewPageAlerts","OverviewTabs","tab","props","flagSettingsPage","useFeatureFlags","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","enableAssetHealthOverviewPreview","useContext","AssetFeatureContext","Tabs","selectedTabId","TabLink","id","paused","alignSelf","QueryRefreshCountdown","OverviewPageHeader","queryData","rest","PageHeader","tabs","GroupTimelineRunsBySelect","onSelect","valueToIcon","valueToLabel","onClick","handleClick","filterable","Button","rightIcon","assertUnreachable","groupRunsByAutomation","byAutomation","jobRow","jobRows","runs","automation","run","makeAutomationKey","automationName","type","makeAutomationPath","repoAddressAsHumanString","useGroupTimelineRunsBy","defaultValue","validate","useCallback","groupRunsBy","setGroupRunsBy","useQueryAndLocalStoragePersistedState","localStorageKey","groupBy","pair","isEmptyState","setGroupByWithDefault","useMemo","RunTimelineRowIcon","overlap","a","b","end","batchRunsForTimeline","minChunkWidth","minMultipleWidth","config","rangeLength","nowLeft","now","batches","startTime","endTime","Date","left","Math","max","floor","min","ceil","sort","consolidated","shift","next","canBatch","right","minLeft","unshift","currentStart","currentEnd","nextStart","nextEnd","minStart","maxEnd","statusToColor","mergeStatusToBackground","counts","scheduled","queued","inProgress","succeeded","queuedStatuses","has","inProgressStatuses","failedStatuses","successStatuses","statusArr","element","runCount","colors","pct","Boolean","colorString","nextPct","pctSoFar","ii","colorForStatus","toFixed","SORT_PRIORITY","manual","schedule","sensor","job","RunTimeline","rows","rangeMs","measureRef","_","buckets","reduce","accum","row","repoKey","repoAddressAsURLString","allKeys","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","entries","bucketA","bucketB","COMMON_COLLATOR","compare","bucket","repoAddressFromPath","rowCount","DATE_TIME_HEIGHT","repoOrder","localeCompare","expandedJobCount","expandedRepos","SECTION_HEADER_HEIGHT","ROW_HEIGHT","duplicateRepoNames","findDuplicateRepoNames","anyObjects","fontSize","TIME_HEADER_HEIGHT","TimeDividers","interval","repoName","TimelineHeaderRow","expanded","isDuplicateRepoName","RunTimelineRow","RunsEmptyOrLoading","includesTicks","RepoRow","showLocation","rightElement","RunStatusTags","inProgressCount","failedCount","succeededCount","RunStatusTagsWithCounts","inProgressText","succeededText","failedText","Tooltip","content","StatusSpan","placement","span","dateTimeOptions","month","day","year","dateTimeOptionsWithTimezone","timeZoneName","timeOnlyOptionsWithMinute","hour","minute","timeOnlyOptions","annotations","_now","formatDateTime","useFormatDateTime","boundaryCursor","dateMarkers","totalTime","dayBoundaries","cursor","valueOf","dayStart","getTime","dayEnd","setDate","getDate","date","startLeftMsec","dayLength","label","toString","endRight","timeMarkers","timeBoundaries","intervalStart","setTime","replace","marker","msToLeft","ms","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","TimlineMarker","annotation","FontFamily","monospace","containerWidth","batched","TimelineRowContainer","RowName","MiddleTruncate","RunChunks","batch","RunChunk","$background","$multiple","Popover","RunHoverContent","interactionKind","className","BatchCount","background","AnchorButton","attrs","transform","sliced","slice","remaining","HoverContentRowName","maxHeight","overflowY","RunStatusDot","Mono","TimestampDisplay","timestamp","TimeElapsed","startUnix","endUnix","strong","useHourWindow","storageKey","hourWindow","setHourWindow","useStateWithStorage","setHourWindowWithDefault","defaultOptions","expiry","HourlyDataCache","loadCacheFromIndexedDB","indexedDBCache","loadPromise","Promise","res","indexedDBKey","cachedData","get","version","cache","Map","saveCacheToIndexedDB","jest","set","clearTimeout","saveTimeout","setTimeout","registeredUnload","window","addEventListener","clearOldEntries","oneWeekAgo","ONE_HOUR_S","ts","delete","addData","data","startHour","endHour","addPartialData","notifySubscribers","mergeIntervals","getHourData","s","getMissingIntervals","missingIntervals","hourStart","hourEnd","cachedStart","cachedEnd","isCompleteRange","intervals","mergedIntervals","lastMerged","subscribe","callback","sub","subscriptions","notifyExistingData","subB","subHour","getCombinedData","combinedData","constructor","keyPrefix","keyMaxCount","dbName","maxCount","getAutomationForRun","tags","tag","DagsterTag","ScheduleName","SensorName","Automaterialize","CompletedRunTimelineQueryVersion","SCHEDULE_FUTURE_TICKS_FRAGMENT","gql","useRunsForTimeline","batchLimit","refreshInterval","showTicks","runsFilter","_end","startSec","endSec","getHourlyBuckets","nextHour","client","useApolloClient","localCacheIdPrefix","AppContext","completedRunsCache","completedRuns","setCompletedRuns","useState","useLayoutEffect","updateTime","completedRunsQueryData","setCompletedRunsData","called","ongoingRunsQueryData","setOngoingRunsData","ongoingRunsData","didLoadCache","setDidLoadCache","useBlockTraceUntilTrue","fetchCompletedRunsQueryData","dataToCommitToCacheByBucket","WeakMap","fetchPaginatedBucketData","updatedAfter","updatedBefore","missingRange","setQueryData","fetchData","hasMore","COMPLETED_RUN_TIMELINE_QUERY","notifyOnNetworkStatusChange","fetchPolicy","variables","completedFilter","Array","from","doneStatuses","limit","completed","__typename","results","hasMoreData","nextCursor","accumulatedData","fetchIdRef","useRef","ongoingRunFetchIdRef","futureTicksFetchIdRef","fetchOngoingRunsQueryData","fetchPaginatedData","ONGOING_RUN_TIMELINE_QUERY","inProgressFilter","RunStatus","CANCELING","STARTED","ongoing","futureTicksQueryData","setFutureTicksQueryData","fetchFutureTicks","FUTURE_TICKS_QUERY","tickCursor","ticksUntil","futureTicksData","workspaceOrError","setLoading","previousRunsByJobKey","jobInfo","runsByJobKey","saveRunInfo","repositoryOrigin","repositoryLocationName","runJobKey","makeJobKey","pipelineName","isAdHoc","isHiddenAssetGroupJob","jobsWithCompletedRunsAndOngoingRuns","jobs","jobKey","jobRunsInfo","info","workspacePipelinePath","repoLocation","isJob","jobsWithCompletedRunsAndOngoingRunsValues","unsortedJobs","addedAdHocJobs","Set","locationEntry","locationEntries","locationOrLoadError","repositories","pipeline","pipelines","schedules","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","add","jobName","jobRuns","jobsWithRuns","earliest","startTimes","lastFetchRef","future","lastRangeMs","abs","loadId","all","RUN_TIMELINE_FRAGMENT","RUN_TIME_FRAGMENT","hourWindowToOffset","useTimelineRange","maxNowMs","hourWindowStorageKey","hourWindowDefault","lookaheadHours","setNow","offsetMsec","setOffsetMsec","Number","timer","setInterval","clearInterval","onPageEarlier","onPageLater","onPageNow","OverviewTimelineRoot","allRepos","visibleRepos","WorkspaceContext","defaults","search","runsForTimelineRet","useDeferredValue","visibleRepoKeys","option","repositoryLocation","visibleObjectKeys","searchLower","trim","visibleRows","RepoFilterButton","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","OverviewActivityRoot","header","_defaultTab","setDefaultTab","json","defaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","isNestingRoute","render","Redirect","OverviewJobsRoot","Heading","JobsPageContent","OverviewResourcesTable","repos","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","workspaceLoading","repoCount","queryResultOverview","useQuery","OVERVIEW_RESOURCES_QUERY","queryLoading","useQueryRefreshAtInterval","repoBuckets","visibleKeys","cachedEntries","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","showSearchSpinner","SearchInputSpinner","tooltipContent","paddingTop","anyReposHidden","NonIdealState","entry","allTopLevelResourceDetails","sortRepoBuckets","PYTHON_ERROR_FRAGMENT","RESOURCE_ENTRY_FRAGMENT","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","checked","onToggleChecked","OverviewSchedules","codeLocationFilter","useCodeLocationFilter","runningStateFilter","useInstigationStatusFilter","filters","button","filterButton","activeFiltersJsx","useFilters","OVERVIEW_SCHEDULES_QUERY","state","runningState","filteredBuckets","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","checkedIds","onToggleFactory","useSelectionReducer","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","canShow","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","refetch","SchedulerInfo","daemonHealth","instance","CheckAllBox","totalCount","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTANCE_HEALTH_FRAGMENT","OverviewSchedulesRoot","OverviewSensorTable","sensors","sensorCount","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","sensorState","toSetFilterValue","SENSOR_TYPE_META","match","SENSOR_TYPE_TO_FILTER","SensorType","ASSET","AUTO_MATERIALIZE","AUTOMATION","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","ALL_SENSOR_TYPE_FILTERS","OverviewSensors","sensorTypes","setSensorTypes","sensorType","vals","join","split","sensorTypeFilter","useStaticSetFilter","allValues","getStringValue","renderLabel","onStateChanged","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","SensorInfo","OverviewSensorsRoot","InstanceAutomaterializationEvaluationHistoryTable","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","setStatuses","InstigationTickStatus","SUCCESS","FAILURE","SKIPPED","raw","paginationProps","useCursorPaginatedQuery","ASSET_DAEMON_TICKS_QUERY","nextCursorForResult","ticks","autoMaterializeTicks","PAGE_SIZE","getResultArray","pageSize","hasPrevCursor","useEffect","endTimestamp","AutomaterializationEvaluationHistoryTable","GlobalAutomaterializationContent","confirm","useConfirmation","permissions","canToggleAutoMaterialize","useUnscopedPermissions","isPaused","setIsPaused","timeRange","getVariables","afterTimestamp","beforeTimestamp","TWENTY_MINUTES","fetch","useLazyQuery","enabled","selectedTick","tableView","view","previousData","allTicks","tick","nextTick","isStuckStartedTick","copy","onHoverTick","DeclarativeAutomationBanner","Table","tbody","tr","td","Checkbox","format","disabled","setPaused","Subtitle2","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","AutomaterializationTickDetailDialog","isOpen","close","AutomaterializeRunHistoryTable","AutomaterializationRoot","GlobalAutomaterializationRoot","Page","labelForBackfillStatus","BulkActionStatus","CANCELED","COMPLETED","FAILED","REQUESTED","COMPLETED_SUCCESS","COMPLETED_FAILED","backfillStatusValues","InstanceBackfills","statusState","setStatusState","statusFilter","allowMultipleSelections","closeOnSelect","BACKFILLS_QUERY","result","partitionBackfillsOrError","isDaemonHealthy","useIsBackfillDaemonHealthy","bottom","DaemonNotRunningAlert","BackfillTable","backfills","margin","CursorPaginationControls","BACKFILL_TABLE_FRAGMENT","InstanceBackfillsRoot","AccumulatingDataFetcher","onData","onError","dataSoFar","currentCursor","stopped","fetchPromise","_this_onError","call","stop","getResultForBackfillLogsPage","partitionBackfillOrError","events","logEvents","BackfillLogsTab","backfill","fetched","useCursorAccumulatedQuery","getResult","setFetched","setError","resp","BACKFILL_LOGS_PAGE_QUERY","backfillId","message","InstigationEventLogTable","INSTIGATION_EVENT_LOG_FRAGMENT","BackfillPartitionsTab","assetStatuses","assetBackfillData","assetBackfillStatuses","VirtualizedBackfillPartitionsHeader","VirtualizedBackfillPartitionsRow","getRunsUrl","token","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","targeted","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","history","useHistory","onShowAssetDetails","assetKey","isPartitioned","params","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","data-testid","testId","tokenForAssetKey","minWidth","ButtonLink","StatusBar","numberFormatter","gridTemplateColumns","gridTemplateRows","ExecutionTimeline_DATE_TIME_HEIGHT","ONE_HOUR_MSEC","ExecutionTimeline_ONE_HOUR_MSEC","EMPTY_STATE_HEIGHT","ExecutionTimeline_EMPTY_STATE_HEIGHT","LEFT_SIDE_SPACE_ALLOTTED","ExecutionTimeline_LEFT_SIDE_SPACE_ALLOTTED","ExecutionTimeline","ExecutionTimelineRow","range","ExecutionTimelineEmptyOrLoading","chunk","BackfillRunsTab","setView","Backfill","actionBarComponents","ExecutionRunTimeline","ExecutionRunTable","usePaginatedRunsTableRuns","pipelineRunsOrError","StickyTableContainer","$top","RunTable","emptyState","actionBarSticky","CursorHistoryControls","dayjs","duration","relativeTime","BackfillPage","featureContext","CloudOSSContext","useParams","selectedTab","setSelectedTab","BACKFILL_DETAILS_QUERY","isInProgress","BackfillActionsMenu","canCancelRuns","wrap","Detail","detail","Timestamp","timeFormat","showSeconds","showTimezone","BackfillDuration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","rootTargetedPartitions","BackfillStatusTagForPage","Tab","canSeeBackfillCoordinatorLogs","graphQLErrors","err","minHeight","Label","rerender","useReducer","intervalId","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","seconds","minutes","hours","days","OverviewRoot","exact","overview_OverviewRoot","getDocumentTitle","useRunListTabs","RUN_TABS_COUNT_QUERY","queuedFilter","countData","queuedCount","filterTokens","useQueryPersistedRunFilters","useSelectedRunsTab","urlForStatus","tokensMinusStatus","statusTokens","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","css","pathname","useLocation","isEqual"],"sourceRoot":""}